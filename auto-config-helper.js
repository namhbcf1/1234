/**
 * File h·ªó tr·ª£ t·ª± ƒë·ªông ch·ªçn c·∫•u h√¨nh PC
 * Cung c·∫•p c√°c h√†m ƒë·ªÉ t·ª± ƒë·ªông ch·ªçn c·∫•u h√¨nh d·ª±a tr√™n game, ng√¢n s√°ch v√† lo·∫°i CPU
 */

// H√†m c·∫≠p nh·∫≠t gi√° tr·ªã dropdown v·ªõi nhi·ªÅu ph∆∞∆°ng ph√°p t√¨m ki·∫øm
function updateDropdownEnhanced(id, value) {
    const dropdown = document.getElementById(id);
    if (!dropdown) {
        console.error(`Dropdown with id ${id} not found`);
        return false;
    }

    // N·∫øu value kh√¥ng ƒë∆∞·ª£c cung c·∫•p, kh√¥ng l√†m g√¨ c·∫£
    if (!value) {
        console.warn(`No value provided for dropdown ${id}`);
        return false;
    }

    // In ra t·∫•t c·∫£ options c√≥ s·∫µn ƒë·ªÉ debug
    const optionsText = Array.from(dropdown.options)
        .map(opt => `${opt.value} (${opt.text})`)
        .join(', ');
    // console.log(`Available options for ${id}: ${optionsText}`);

    // T√¨m option ph√π h·ª£p
    let foundOption = false;
    let optionToSelect = null;
    const valueToSearch = value.toString().toLowerCase();

    // Ph∆∞∆°ng ph√°p 1: T√¨m ch√≠nh x√°c theo value
    for (let i = 0; i < dropdown.options.length; i++) {
        const option = dropdown.options[i];
        if (option.value && option.value.toLowerCase() === valueToSearch) {
            optionToSelect = option;
            foundOption = true;
            // console.log(`Found exact value match for ${id}: ${option.text}`);
            break;
        }
    }

    // Ph∆∞∆°ng ph√°p 2: T√¨m ch√≠nh x√°c theo text
    if (!foundOption) {
        for (let i = 0; i < dropdown.options.length; i++) {
            const option = dropdown.options[i];
            if (option.text && option.text.toLowerCase() === valueToSearch) {
                optionToSelect = option;
                foundOption = true;
                // console.log(`Found exact text match for ${id}: ${option.text}`);
                break;
            }
        }
    }

    // Ph∆∞∆°ng ph√°p 3: T√¨m option c√≥ ch·ª©a value
    if (!foundOption) {
        for (let i = 0; i < dropdown.options.length; i++) {
            const option = dropdown.options[i];
            // Ki·ªÉm tra n·∫øu value n·∫±m trong option.value ho·∫∑c option.text
            if ((option.value && option.value.toLowerCase().includes(valueToSearch)) || 
                (option.text && option.text.toLowerCase().includes(valueToSearch))) {
                optionToSelect = option;
                foundOption = true;
                // console.log(`Found partial match for ${id}: ${option.text} (searched for ${value})`);
                break;
            }
        }
    }
    
    // Ph∆∞∆°ng ph√°p 4: T√¨m t∆∞∆°ng t·ª± v·ªõi c√°c t·ª´ kh√≥a ch√≠nh
    if (!foundOption) {
        const keywords = valueToSearch.split(/[-_\s.]+/); // T√°ch theo d·∫•u g·∫°ch ngang, g·∫°ch d∆∞·ªõi, kho·∫£ng tr·∫Øng
        for (let i = 0; i < dropdown.options.length; i++) {
            const option = dropdown.options[i];
            const optionText = (option.text || '').toLowerCase();
            const optionValue = (option.value || '').toLowerCase();
            
            // Ki·ªÉm tra n·∫øu text ho·∫∑c value ch·ª©a b·∫•t k·ª≥ t·ª´ kh√≥a n√†o
            const matchingKeywords = keywords.filter(keyword => 
                (keyword.length > 1) && (optionText.includes(keyword) || optionValue.includes(keyword))
            );
            
            if (matchingKeywords.length > 0) {
                optionToSelect = option;
                foundOption = true;
                // console.log(`Found keyword match for ${id}: ${option.text} (matched keywords: ${matchingKeywords.join(', ')})`);
                break;
            }
        }
    }

    // Ph∆∞∆°ng ph√°p 5: D√πng option ƒë·∫ßu ti√™n kh√¥ng ph·∫£i l√† disabled & placeholder
    if (!foundOption) {
        for (let i = 0; i < dropdown.options.length; i++) {
            const option = dropdown.options[i];
            if (!option.disabled && option.value && option.value !== "null" && option.value !== "") {
                optionToSelect = option;
                foundOption = true;
                // console.log(`Using first available option for ${id}: ${option.text}`);
                break;
            }
        }
    }

    // C·∫≠p nh·∫≠t gi√° tr·ªã dropdown n·∫øu t√¨m th·∫•y option
    if (foundOption && optionToSelect) {
        // L∆∞u l·∫°i gi√° tr·ªã hi·ªán t·∫°i
        const currentValue = dropdown.value;
        
        // C·∫≠p nh·∫≠t dropdown
        dropdown.value = optionToSelect.value;
        
        // Ch·ªâ k√≠ch ho·∫°t s·ª± ki·ªán change n·∫øu gi√° tr·ªã th·ª±c s·ª± thay ƒë·ªïi
        if (currentValue !== optionToSelect.value) {
            // K√≠ch ho·∫°t s·ª± ki·ªán change ƒë·ªÉ c·∫≠p nh·∫≠t giao di·ªán
            const event = new Event('change', { bubbles: true });
            dropdown.dispatchEvent(event);
            // console.log(`Updated ${id} dropdown to: ${optionToSelect.text}`);
        } else {
            // console.log(`${id} dropdown already set to: ${optionToSelect.text}`);
        }
        
        return true;
    } else {
        console.warn(`Could not find suitable option for ${id} with value ${value}`);
        
        // N·∫øu t·∫•t c·∫£ ph∆∞∆°ng ph√°p ƒë·ªÅu th·∫•t b·∫°i, ch·ªçn m·ªôt gi√° tr·ªã m·∫∑c ƒë·ªãnh d·ª±a tr√™n lo·∫°i dropdown
        const defaultSelections = {
            'cpu': null,
            'mainboard': null,
            'vga': null,
            'ram': null,
            'ssd': null,
            'cpuCooler': null,
            'psu': null,
            'case': null
        };
        
        if (defaultSelections[id]) {
            // console.log(`Selecting default option for ${id}: ${defaultSelections[id].text}`);
            dropdown.value = defaultSelections[id].value;
            const event = new Event('change', { bubbles: true });
            dropdown.dispatchEvent(event);
            return true;
        }
        
        return false;
    }
}

// H√†m ch·ªçn option ƒë·∫ßu ti√™n kh√¥ng r·ªóng
function selectFirstNonEmptyOption(dropdown) {
    for (let i = 1; i < dropdown.options.length; i++) { // B·∫Øt ƒë·∫ßu t·ª´ 1 ƒë·ªÉ b·ªè qua option ƒë·∫ßu ti√™n (th∆∞·ªùng l√† placeholder)
        const option = dropdown.options[i];
        if (option && !option.disabled && option.value && option.value !== "null" && option.value !== "") {
            return option;
        }
    }
    return null;
}

// H√†m tr·∫£ v·ªÅ option placeholder (option ƒë·∫ßu ti√™n)
function selectPlaceholderOption(dropdown) {
    if (dropdown.options.length > 0) {
        return dropdown.options[0];
    }
    return null;
}

// C·∫≠p nh·∫≠t gi√° sau khi ch·ªçn c·∫•u h√¨nh
function updateComponentPricesFixed() {
    // Ki·ªÉm tra xem h√†m updateComponentPrices c√≥ t·ªìn t·∫°i trong window kh√¥ng
    if (typeof window.updateComponentPrices === 'function') {
        window.updateComponentPrices();
    } else {
        console.log('S·ª≠ d·ª•ng h√†m c·∫≠p nh·∫≠t gi√° thay th·∫ø');
        
        // C·∫≠p nh·∫≠t gi√° v√† th√†nh ti·ªÅn cho c√°c linh ki·ªán
        const componentTypes = ['cpu', 'mainboard', 'ram', 'vga', 'ssd', 'cpuCooler', 'psu', 'case', 'hdd', 'monitor'];
        let totalPrice = 0;
        
        componentTypes.forEach(type => {
            const element = document.getElementById(type);
            const priceEl = document.getElementById(`${type}-price`);
            const totalEl = document.getElementById(`${type}-total`);
            
            if (element && element.value && priceEl && totalEl) {
                const option = element.options[element.selectedIndex];
                if (option) {
                    let price = 0;
                    
                    // Tr√≠ch xu·∫•t gi√° t·ª´ text n·∫øu c√≥ ƒë·ªãnh d·∫°ng nh∆∞ "T√™n - XXX,XXX VNƒê"
                    const text = option.text || '';
                    const priceMatch = text.match(/(\d[\d\s,\.]*)\s*VNƒê/);
                    if (priceMatch && priceMatch[1]) {
                        price = parseInt(priceMatch[1].replace(/[\s,\.]/g, ''), 10);
                    }
                    
                    priceEl.textContent = formatPriceFixed(price);
                    totalEl.textContent = formatPriceFixed(price);
                    totalPrice += price;
                }
            }
        });
        
        // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn tr√™n trang
        const totalPriceDisplay = document.querySelector('#total-price p');
        if (totalPriceDisplay) {
            totalPriceDisplay.textContent = formatPriceFixed(totalPrice) + ' VNƒê';
        }
        
        // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn trong b·∫£ng
        const totalPriceCell = document.getElementById('total-price-cell');
        if (totalPriceCell) {
            totalPriceCell.textContent = formatPriceFixed(totalPrice);
        }
    }
}

// ƒê·ªãnh d·∫°ng gi√° ti·ªÅn
function formatPriceFixed(price) {
    return price ? price.toLocaleString() : "0";
}

// H√†m t·ª± ƒë·ªông ch·ªçn c·∫•u h√¨nh d·ª±a tr√™n game, ng√¢n s√°ch v√† lo·∫°i CPU
async function autoSelectConfigEnhanced(gameId, budget, cpuType) {
    console.log(`Enhanced autoSelectConfig with: gameId=${gameId}, budget=${budget}, cpuType=${cpuType}`);
    
    if (!gameId || !budget || !cpuType) {
        console.warn('Missing required parameters for autoSelectConfig');
        return null;
    }

    try {
        // ƒê·ªãnh d·∫°ng budget key
        const budgetInMillions = Math.floor(budget / 1000000);
        console.log(`Budget value in millions: ${budgetInMillions}M`);
        const budgetKey = `${budgetInMillions}M`;
        
        // S·ª≠ d·ª•ng import ƒë·ªông thay v√¨ window.intelConfigs/window.amdConfigs
        const cpuFolder = cpuType.toLowerCase() === 'intel' ? 'intel' : 'amd';
        const configPath = `./js/configs/${cpuFolder}/${gameId}.js`;
        console.log(`üîç Enhanced helper ƒëang t√¨m file c·∫•u h√¨nh: ${configPath}`);
        
        let configResult = null;
        
        try {
            const configModule = await import(configPath).catch(e => {
                console.error(`‚ùå Kh√¥ng th·ªÉ import file c·∫•u h√¨nh ${configPath}:`, e);
                return null;
            });
            
            if (configModule) {
                // H·ªó tr·ª£ nhi·ªÅu c√°ch export kh√°c nhau
                if (configModule.configs) {
                    configResult = configModule.configs;
                    console.log(`‚úÖ ƒê√£ t√¨m th·∫•y config export d·∫°ng: configModule.configs`);
                } else if (configModule.config) {
                    configResult = configModule.config;
                    console.log(`‚úÖ ƒê√£ t√¨m th·∫•y config export d·∫°ng: configModule.config`);
                } else if (configModule.default) {
                    // Tr∆∞·ªùng h·ª£p export default
                    if (typeof configModule.default === 'object') {
                        configResult = configModule.default;
                        console.log(`‚úÖ ƒê√£ t√¨m th·∫•y config export d·∫°ng: export default {...}`);
                    } else if (typeof configModule.default === 'function') {
                        // Tr∆∞·ªùng h·ª£p export default function() { return {...} }
                        configResult = configModule.default(budgetKey);
                        console.log(`‚úÖ ƒê√£ t√¨m th·∫•y config export d·∫°ng: export default function`);
                    }
                } else if (Object.keys(configModule).length > 0) {
                    // Tr∆∞·ªùng h·ª£p module.exports = {...} ho·∫∑c export c·∫£ module
                    const firstKey = Object.keys(configModule)[0];
                    if (typeof configModule[firstKey] === 'object' && configModule[firstKey] !== null) {
                        configResult = configModule[firstKey];
                        console.log(`‚úÖ ƒê√£ t√¨m th·∫•y config export v·ªõi key: ${firstKey}`);
                    } else {
                        configResult = configModule;
                        console.log(`‚úÖ ƒê√£ t√¨m th·∫•y config export to√†n b·ªô module`);
                    }
                }
                
                // Log c·∫•u tr√∫c module ƒë·ªÉ debug
                console.log(`üìã C·∫•u tr√∫c configModule:`, Object.keys(configModule));
            }
        } catch (e) {
            console.error(`‚ùå L·ªói khi x·ª≠ l√Ω file c·∫•u h√¨nh:`, e);
        }
        
        if (!configResult) {
            console.warn(`No configuration found for ${cpuType} ${gameId}`);
            return null;
        }
        
        // X√°c ƒë·ªãnh c·∫•u h√¨nh ph√π h·ª£p
        let config = null;
        
        // TR∆Ø·ªúNG H·ª¢P 1: configResult l√† m·ªôt c·∫•u h√¨nh tr·ª±c ti·∫øp (kh√¥ng ph√¢n theo budget)
        if (typeof configResult === 'object' && 
            configResult.cpu && configResult.mainboard && configResult.ram) {
            // ƒê√¢y l√† m·ªôt config tr·ª±c ti·∫øp, kh√¥ng ph√¢n theo budget
            config = configResult;
            console.log(`‚úÖ ƒê√£ t√¨m th·∫•y c·∫•u h√¨nh tr·ª±c ti·∫øp kh√¥ng ph√¢n theo budget`);
        }
        // TR∆Ø·ªúNG H·ª¢P 2: configResult ch·ª©a c√°c m·ª©c ng√¢n s√°ch
        else {
            // L·∫•y c√°c m·ª©c ng√¢n s√°ch c√≥ s·∫µn 
            const budgetKeys = Object.keys(configResult).filter(key => /^\d+M$/.test(key));
            console.log(`Found budget keys:`, budgetKeys);
            
            if (budgetKeys.length > 0) {
                // T√¨m budget g·∫ßn nh·∫•t
                const availableBudgets = budgetKeys.map(key => parseInt(key.replace('M', '')));
                console.log(`Available budgets for ${gameId}:`, availableBudgets);
                
                // T√¨m budget g·∫ßn nh·∫•t - x·ª≠ l√Ω an to√†n cho m·∫£ng
                let closestBudget;
                
                if (availableBudgets.length === 0) {
                    console.warn('No available budgets found, using default budget');
                    closestBudget = budgetInMillions; // S·ª≠ d·ª•ng budget hi·ªán t·∫°i
                } else if (availableBudgets.length === 1) {
                    // N·∫øu ch·ªâ c√≥ m·ªôt budget, d√πng n√≥
                    closestBudget = availableBudgets[0];
                    console.log(`Only one budget available (${closestBudget}M), using it`);
                } else {
                    // C√≥ nhi·ªÅu h∆°n m·ªôt budget, t√¨m g·∫ßn nh·∫•t
                    closestBudget = availableBudgets.reduce((prev, curr) => 
                        Math.abs(curr - budgetInMillions) < Math.abs(prev - budgetInMillions) ? curr : prev,
                        availableBudgets[0] // Gi√° tr·ªã kh·ªüi t·∫°o l√† ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n
                    );
                    console.log(`Found closest budget: ${closestBudget}M for requested: ${budgetInMillions}M`);
                }
                
                const closestBudgetKey = `${closestBudget}M`;
                console.log(`Using closest available budget: ${closestBudgetKey} for requested budget: ${budgetInMillions}M`);
                
                config = configResult[closestBudgetKey];
            }
            // TR∆Ø·ªúNG H·ª¢P 3: Kh√¥ng t√¨m th·∫•y budget keys nh∆∞ng c√≥ object c·∫•u h√¨nh
            else if (Object.keys(configResult).length > 0) {
                // Th·ª≠ t√¨m m·ªôt object c·∫•u h√¨nh ƒë·∫ßu ti√™n c√≥ c√°c thu·ªôc t√≠nh c·∫ßn thi·∫øt
                for (const key of Object.keys(configResult)) {
                    const obj = configResult[key];
                    if (typeof obj === 'object' && obj.cpu && obj.mainboard && obj.ram) {
                        config = obj;
                        console.log(`‚úÖ ƒê√£ t√¨m th·∫•y c·∫•u h√¨nh ·ªü key: ${key}`);
                        break;
                    }
                }
                
                // N·∫øu kh√¥ng t√¨m th·∫•y, d√πng ch√≠nh configResult n·∫øu n√≥ c√≥ c√°c thu·ªôc t√≠nh c·∫ßn thi·∫øt
                if (!config) {
                    const keys = Object.keys(configResult);
                    if (keys.includes('cpu') && keys.includes('mainboard') && keys.includes('ram')) {
                        config = configResult;
                        console.log(`‚úÖ S·ª≠ d·ª•ng configResult l√†m c·∫•u h√¨nh`);
                    }
                }
            }
        }
        
        // Ki·ªÉm tra n·∫øu kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh n√†o
        if (!config) {
            console.warn(`‚ùå Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh ph√π h·ª£p cho ${cpuType} ${gameId} ${budgetKey}`);
            return null;
        }
        
        console.log('‚öôÔ∏è Config found:', config);
        
        // C·∫≠p nh·∫≠t c√°c dropdown theo c·∫•u h√¨nh
        if (config.cpu) updateDropdownEnhanced('cpu', config.cpu);
        if (config.mainboard) updateDropdownEnhanced('mainboard', config.mainboard);
        if (config.vga) updateDropdownEnhanced('vga', config.vga);
        if (config.ram) updateDropdownEnhanced('ram', config.ram);
        if (config.ssd) updateDropdownEnhanced('ssd', config.ssd);
        if (config.case) updateDropdownEnhanced('case', config.case);
        if (config.cpuCooler) updateDropdownEnhanced('cpuCooler', config.cpuCooler);
        if (config.psu) updateDropdownEnhanced('psu', config.psu);
        
        // C·∫≠p nh·∫≠t gi√° v√† t·ªïng ti·ªÅn sau khi t·∫•t c·∫£ c√°c dropdown ƒë∆∞·ª£c c·∫≠p nh·∫≠t
        setTimeout(function() {
            try {
                // Ki·ªÉm tra t∆∞∆°ng th√≠ch gi·ªØa c√°c linh ki·ªán
                ensureCompatibleComponents();

                // C·∫≠p nh·∫≠t gi√°
                updateComponentPricesFixed();
                console.log('Price table updated after auto-selection');
                
                // Hi·ªÉn th·ªã b·∫£ng c·∫•u h√¨nh sau khi ch·ªçn t·∫•t c·∫£ linh ki·ªán
                const configTable = document.getElementById('config-table');
                if (configTable) {
                    // Hi·ªÉn th·ªã b·∫£ng
                    configTable.style.display = 'block';
                    
                    // C·∫≠p nh·∫≠t h√¨nh ·∫£nh v√† th√¥ng tin trong b·∫£ng
                    if (typeof window.updateConfigTableImages === 'function') {
                        try {
                            window.updateConfigTableImages();
                            console.log('Configuration table images updated successfully');
                        } catch (error) {
                            console.error('Error updating configuration table images:', error);
                        }
                    }
                    
                    // Cu·ªôn trang ƒë·∫øn b·∫£ng c·∫•u h√¨nh
                    configTable.scrollIntoView({ behavior: 'smooth', block: 'start' });
                }
                
                // Hi·ªÉn th·ªã modal chi ti·∫øt n·∫øu c√≥
                if (typeof window.showConfigDetailModal === 'function') {
                    console.log('Showing configuration detail modal');
                    window.showConfigDetailModal();
                }
            } catch (error) {
                console.error('Error updating configuration after auto-selection:', error);
            }
        }, 1000); // TƒÉng delay ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªß th·ªùi gian t·∫£i d·ªØ li·ªáu
        
        return config;
    } catch (error) {
        console.error('Error in autoSelectConfigEnhanced:', error);
        return null;
    }
}

// Ki·ªÉm tra t∆∞∆°ng th√≠ch socket gi·ªØa CPU v√† Mainboard
function ensureCompatibleComponents() {
    const cpuSelect = document.getElementById('cpu');
    const mainboardSelect = document.getElementById('mainboard');
    const ramSelect = document.getElementById('ram');
    const vgaSelect = document.getElementById('vga');
    const psuSelect = document.getElementById('psu');
    const ssdSelect = document.getElementById('ssd');
    const caseSelect = document.getElementById('case');
    const cpuCoolerSelect = document.getElementById('cpuCooler');
    
    if (!cpuSelect || !mainboardSelect) {
        return; // Kh√¥ng ƒë·ªß th√¥ng tin ƒë·ªÉ ki·ªÉm tra
    }
    
    console.log('üîç Ki·ªÉm tra t∆∞∆°ng th√≠ch gi·ªØa c√°c linh ki·ªán...');
    
    // L·∫•y th√¥ng tin CPU
    const cpuData = window.getComponentData ? window.getComponentData('CPU', cpuSelect.value) : null;
    // L·∫•y th√¥ng tin Mainboard
    const mainboardData = window.getComponentData ? window.getComponentData('Mainboard', mainboardSelect.value) : null;
    // L·∫•y th√¥ng tin RAM
    const ramData = window.getComponentData ? window.getComponentData('RAM', ramSelect.value) : null;
    // L·∫•y th√¥ng tin VGA
    const vgaData = window.getComponentData ? window.getComponentData('VGA', vgaSelect.value) : null;
    // L·∫•y th√¥ng tin PSU
    const psuData = window.getComponentData ? window.getComponentData('PSU', psuSelect.value) : null;
    // L·∫•y th√¥ng tin SSD
    const ssdData = window.getComponentData ? window.getComponentData('SSD', ssdSelect.value) : null;
    // L·∫•y th√¥ng tin Case
    const caseData = window.getComponentData ? window.getComponentData('Case', caseSelect.value) : null;
    // L·∫•y th√¥ng tin CPU Cooler
    const coolerData = window.getComponentData ? window.getComponentData('Cooler', cpuCoolerSelect.value) : null;

    if (!cpuData) {
        console.warn('Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu CPU');
        return; // Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ki·ªÉm tra
    }
    
    // T·∫°o th√¥ng b√°o t·ªïng h·ª£p
    let compatibilityMessages = [];
    
    // Hi·ªÉn th·ªã th√¥ng tin b·∫£o h√†nh
    displayWarrantyInfo(cpuData, mainboardData, ramData, vgaData, psuData, ssdData, caseData, coolerData);
    
    // 1. Ki·ªÉm tra socket t∆∞∆°ng th√≠ch
    let cpuSocket = cpuData.socket || '';
    if (!cpuSocket) {
        // X√°c ƒë·ªãnh socket d·ª±a v√†o t√™n CPU
        const cpuName = cpuData.name ? cpuData.name.toLowerCase() : '';
        if (cpuName.includes('ryzen') || cpuName.includes('amd')) {
            if (cpuName.includes('5600x') || cpuName.includes('5700x') || cpuName.includes('5800x') || cpuName.includes('5900x') || cpuName.includes('5950x')) {
                cpuSocket = 'AM4';
            } else if (cpuName.includes('7600x') || cpuName.includes('7700x') || cpuName.includes('7900x') || cpuName.includes('7950x') || cpuName.includes('7800x3d') || cpuName.includes('9700x') || cpuName.includes('9900x')) {
                cpuSocket = 'AM5';
            } else if (cpuName.includes('3600') || cpuName.includes('3700x') || cpuName.includes('3800x')) {
                cpuSocket = 'AM4';
            } else {
                cpuSocket = 'AM4'; // M·∫∑c ƒë·ªãnh cho AMD Ryzen
            }
        } else if (cpuName.includes('intel') || cpuName.includes('core i')) {
            if (cpuName.includes('12') || cpuName.includes('13') || cpuName.includes('14')) {
                cpuSocket = 'LGA1700';
            } else if (cpuName.includes('10') || cpuName.includes('11')) {
                cpuSocket = 'LGA1200';
            } else if (cpuName.includes('8') || cpuName.includes('9')) {
                cpuSocket = 'LGA1151';
            } else if (cpuName.includes('6') || cpuName.includes('7')) {
                cpuSocket = 'LGA1151';
            } else {
                cpuSocket = 'LGA1700'; // M·∫∑c ƒë·ªãnh cho Intel m·ªõi
            }
        }
    }
    
    // Th√™m th√¥ng tin CPU socket
    compatibilityMessages.push(`CPU Socket: ${cpuSocket}`);
    
    // Ki·ªÉm tra t∆∞∆°ng th√≠ch mainboard
    if (mainboardData) {
        let mainboardSocket = mainboardData.socket || '';
        if (!mainboardSocket) {
            // X√°c ƒë·ªãnh socket d·ª±a v√†o t√™n mainboard
            const mainboardName = mainboardData.name ? mainboardData.name.toLowerCase() : '';
            if (mainboardName.includes('b450') || mainboardName.includes('b550') || mainboardName.includes('x570')) {
                mainboardSocket = 'AM4';
            } else if (mainboardName.includes('b650') || mainboardName.includes('x670')) {
                mainboardSocket = 'AM5';
            } else if (mainboardName.includes('b660') || mainboardName.includes('z690') || mainboardName.includes('z790')) {
                mainboardSocket = 'LGA1700';
            } else if (mainboardName.includes('b460') || mainboardName.includes('b560') || mainboardName.includes('z490') || mainboardName.includes('z590')) {
                mainboardSocket = 'LGA1200';
            } else if (mainboardName.includes('h310') || mainboardName.includes('b360') || mainboardName.includes('b365') || mainboardName.includes('z370') || mainboardName.includes('z390')) {
                mainboardSocket = 'LGA1151';
            } else if (mainboardName.includes('h110') || mainboardName.includes('b150') || mainboardName.includes('z170') || mainboardName.includes('z270')) {
                mainboardSocket = 'LGA1151';
            }
        }
        
        // Th√™m th√¥ng tin mainboard socket
        compatibilityMessages.push(`Mainboard Socket: ${mainboardSocket}`);
        
        // Ki·ªÉm tra t∆∞∆°ng th√≠ch CPU - Mainboard
        if (cpuSocket && mainboardSocket && cpuSocket !== mainboardSocket) {
            console.warn(`‚ùå Socket kh√¥ng t∆∞∆°ng th√≠ch: CPU (${cpuSocket}) v√† Mainboard (${mainboardSocket})`);
            compatibilityMessages.push(`‚ö†Ô∏è Socket kh√¥ng t∆∞∆°ng th√≠ch! CPU (${cpuSocket}) - Mainboard (${mainboardSocket})`);
            
            // T√¨m mainboard t∆∞∆°ng th√≠ch v·ªõi CPU ƒë√£ ch·ªçn
            if (cpuSocket.includes('AM4')) {
                // Ch·ªçn mainboard AMD AM4
                const amdMainboards = ['GIGA-B450', 'JGINYUE-B450', 'GIGA-B550', 'asrock-b550m-se', 'gigabyte-b550m-gaming-wifi'];
                for (const mainboardId of amdMainboards) {
                    updateDropdownEnhanced('mainboard', mainboardId);
                    compatibilityMessages.push(`‚úÖ ƒê√£ ch·ªçn mainboard AM4 t∆∞∆°ng th√≠ch: ${mainboardId}`);
                    break;
                }
            } else if (cpuSocket.includes('AM5')) {
                // Ch·ªçn mainboard AMD AM5
                const amdMainboards = ['JGINYUE-B650', 'JGINYUE-B650-PRO', 'ASROCK-B650M-HDV-M2', 'MSI-PRO-B650M-P'];
                for (const mainboardId of amdMainboards) {
                    updateDropdownEnhanced('mainboard', mainboardId);
                    compatibilityMessages.push(`‚úÖ ƒê√£ ch·ªçn mainboard AM5 t∆∞∆°ng th√≠ch: ${mainboardId}`);
                    break;
                }
            } else if (cpuSocket.includes('LGA1151') || cpuSocket.includes('LGA1200')) {
                // Ch·ªçn mainboard Intel c≈©
                const intelMainboards = ['H310', 'B360', 'B365', 'H410', 'B460'];
                for (const mainboardId of intelMainboards) {
                    updateDropdownEnhanced('mainboard', mainboardId);
                    compatibilityMessages.push(`‚úÖ ƒê√£ ch·ªçn mainboard Intel t∆∞∆°ng th√≠ch: ${mainboardId}`);
                    break;
                }
            } else if (cpuSocket.includes('LGA1700')) {
                // Ch·ªçn mainboard Intel m·ªõi
                const intelMainboards = ['ASUS-H610', 'MSI-H610', 'HNZ-H610', 'ASUS-B760', 'MSI-B760', 'B760M-E'];
                for (const mainboardId of intelMainboards) {
                    updateDropdownEnhanced('mainboard', mainboardId);
                    compatibilityMessages.push(`‚úÖ ƒê√£ ch·ªçn mainboard Intel t∆∞∆°ng th√≠ch: ${mainboardId}`);
                    break;
                }
            }
        } else if (cpuSocket && mainboardSocket) {
            compatibilityMessages.push(`‚úÖ CPU v√† Mainboard socket t∆∞∆°ng th√≠ch (${cpuSocket})`);
        }
    }
    
    // 2. Ki·ªÉm tra t∆∞∆°ng th√≠ch RAM v·ªõi CPU/mainboard
    if (ramData && (cpuSocket || mainboardData)) {
        let ramType = '';
        const ramName = ramData.name ? ramData.name.toLowerCase() : '';
        
        if (ramName.includes('ddr5')) {
            ramType = 'DDR5';
        } else if (ramName.includes('ddr4')) {
            ramType = 'DDR4';
        } else if (ramName.includes('ddr3')) {
            ramType = 'DDR3';
        }
        
        // Th√™m th√¥ng tin RAM type
        compatibilityMessages.push(`RAM Type: ${ramType}`);
        
        // AM4 ch·ªâ t∆∞∆°ng th√≠ch v·ªõi DDR4
        if (cpuSocket === 'AM4' && ramType === 'DDR5') {
            console.warn('‚ùå CPU AM4 kh√¥ng t∆∞∆°ng th√≠ch v·ªõi RAM DDR5');
            compatibilityMessages.push(`‚ö†Ô∏è CPU AM4 kh√¥ng t∆∞∆°ng th√≠ch v·ªõi RAM DDR5`);
            
            // Ch·ªçn RAM DDR4 ph√π h·ª£p
            const ddr4Rams = ['cosair-16', 'cosair-32', 'fury-16', 'adata-16', 'tridentz-16'];
            for (const ramId of ddr4Rams) {
                updateDropdownEnhanced('ram', ramId);
                compatibilityMessages.push(`‚úÖ ƒê√£ ch·ªçn RAM DDR4 t∆∞∆°ng th√≠ch: ${ramId}`);
                break;
            }
        } else if (cpuSocket === 'AM4' && ramType === 'DDR4') {
            compatibilityMessages.push(`‚úÖ RAM DDR4 t∆∞∆°ng th√≠ch v·ªõi CPU AM4`);
        }
        
        // AM5 ch·ªâ t∆∞∆°ng th√≠ch v·ªõi DDR5
        if (cpuSocket === 'AM5' && ramType === 'DDR4') {
            console.warn('‚ùå CPU AM5 ch·ªâ t∆∞∆°ng th√≠ch v·ªõi RAM DDR5');
            compatibilityMessages.push(`‚ö†Ô∏è CPU AM5 ch·ªâ t∆∞∆°ng th√≠ch v·ªõi RAM DDR5`);
            
            // Ch·ªçn RAM DDR5 ph√π h·ª£p
            const ddr5Rams = ['Cosair-16-5200', 'tridentz-16-6000', 'tridentz-32-6000', 'adata-32-6000'];
            for (const ramId of ddr5Rams) {
                updateDropdownEnhanced('ram', ramId);
                compatibilityMessages.push(`‚úÖ ƒê√£ ch·ªçn RAM DDR5 t∆∞∆°ng th√≠ch: ${ramId}`);
                break;
            }
        } else if (cpuSocket === 'AM5' && ramType === 'DDR5') {
            compatibilityMessages.push(`‚úÖ RAM DDR5 t∆∞∆°ng th√≠ch v·ªõi CPU AM5`);
        }
        
        // LGA1700 t∆∞∆°ng th√≠ch v·ªõi c·∫£ DDR4 v√† DDR5 t√πy mainboard
        if (cpuSocket === 'LGA1700' && mainboardData) {
            const mainboardName = mainboardData.name ? mainboardData.name.toLowerCase() : '';
            const mainboardSupportsDDR4 = mainboardName.includes('ddr4');
            const mainboardSupportsDDR5 = mainboardName.includes('ddr5');
            
            // N·∫øu mainboard h·ªó tr·ª£ DDR4 nh∆∞ng RAM l√† DDR5 ho·∫∑c ng∆∞·ª£c l·∫°i
            if ((mainboardSupportsDDR4 && ramType === 'DDR5') ||
                (mainboardSupportsDDR5 && ramType === 'DDR4')) {
                console.warn('‚ùå RAM kh√¥ng t∆∞∆°ng th√≠ch v·ªõi mainboard');
                compatibilityMessages.push(`‚ö†Ô∏è RAM ${ramType} kh√¥ng t∆∞∆°ng th√≠ch v·ªõi mainboard ${mainboardName}`);
                
                if (mainboardSupportsDDR4) {
                    // Ch·ªçn RAM DDR4 ph√π h·ª£p
                    const ddr4Rams = ['cosair-16', 'cosair-32', 'fury-16', 'adata-16', 'tridentz-16'];
                    for (const ramId of ddr4Rams) {
                        updateDropdownEnhanced('ram', ramId);
                        compatibilityMessages.push(`‚úÖ ƒê√£ ch·ªçn RAM DDR4 t∆∞∆°ng th√≠ch: ${ramId}`);
                        break;
                    }
                } else if (mainboardSupportsDDR5) {
                    // Ch·ªçn RAM DDR5 ph√π h·ª£p
                    const ddr5Rams = ['Cosair-16-5200', 'tridentz-16-6000', 'tridentz-32-6000', 'adata-32-6000'];
                    for (const ramId of ddr5Rams) {
                        updateDropdownEnhanced('ram', ramId);
                        compatibilityMessages.push(`‚úÖ ƒê√£ ch·ªçn RAM DDR5 t∆∞∆°ng th√≠ch: ${ramId}`);
                        break;
                    }
                }
            } else if ((mainboardSupportsDDR4 && ramType === 'DDR4') || 
                      (mainboardSupportsDDR5 && ramType === 'DDR5')) {
                compatibilityMessages.push(`‚úÖ RAM ${ramType} t∆∞∆°ng th√≠ch v·ªõi mainboard`);
            } else {
                // N·∫øu kh√¥ng th·ªÉ x√°c ƒë·ªãnh t·ª´ t√™n, m·∫∑c ƒë·ªãnh l√† t∆∞∆°ng th√≠ch
                compatibilityMessages.push(`RAM v√† mainboard ƒë∆∞·ª£c coi l√† t∆∞∆°ng th√≠ch (kh√¥ng th·ªÉ x√°c ƒë·ªãnh ch√≠nh x√°c)`);
            }
        }
    }
    
    // 3. Ki·ªÉm tra ngu·ªìn ƒë·ªß cho VGA
    if (vgaData && psuData) {
        const vgaName = vgaData.name ? vgaData.name.toLowerCase() : '';
        let estimatedVgaPower = 75; // M·∫∑c ƒë·ªãnh
        
        // ∆Ø·ªõc t√≠nh c√¥ng su·∫•t d·ª±a tr√™n t√™n VGA
        if (vgaName.includes('3090') || vgaName.includes('4090')) {
            estimatedVgaPower = 450;
        } else if (vgaName.includes('3080') || vgaName.includes('4080')) {
            estimatedVgaPower = 350;
        } else if (vgaName.includes('3070') || vgaName.includes('4070')) {
            estimatedVgaPower = 250;
        } else if (vgaName.includes('3060') || vgaName.includes('4060')) {
            estimatedVgaPower = 170;
        } else if (vgaName.includes('2080') || vgaName.includes('2070')) {
            estimatedVgaPower = 225;
        } else if (vgaName.includes('2060') || vgaName.includes('1660')) {
            estimatedVgaPower = 160;
        } else if (vgaName.includes('1650') || vgaName.includes('1050')) {
            estimatedVgaPower = 75;
        }
        
        // ∆Ø·ªõc t√≠nh t·ªïng c√¥ng su·∫•t h·ªá th·ªëng
        const cpuPower = cpuData && cpuData.name ? 
            (cpuData.name.toLowerCase().includes('i9') || cpuData.name.toLowerCase().includes('5950') ? 125 : 65) : 65;
        const totalEstimatedPower = estimatedVgaPower + cpuPower + 100; // 100W cho c√°c th√†nh ph·∫ßn kh√°c
        
        // L·∫•y c√¥ng su·∫•t PSU
        let psuPower = 500; // M·∫∑c ƒë·ªãnh
        const psuName = psuData.name ? psuData.name.toLowerCase() : '';
        const psuPowerMatch = psuName.match(/(\d+)w/i);
        if (psuPowerMatch && psuPowerMatch[1]) {
            psuPower = parseInt(psuPowerMatch[1]);
        }
        
        compatibilityMessages.push(`∆Ø·ªõc t√≠nh c√¥ng su·∫•t h·ªá th·ªëng: ~${totalEstimatedPower}W (VGA: ${estimatedVgaPower}W, CPU: ${cpuPower}W)`);
        compatibilityMessages.push(`C√¥ng su·∫•t ngu·ªìn: ${psuPower}W`);
        
        if (psuPower < totalEstimatedPower) {
            console.warn(`‚ùå Ngu·ªìn ${psuPower}W c√≥ th·ªÉ kh√¥ng ƒë·ªß cho h·ªá th·ªëng (c·∫ßn ~${totalEstimatedPower}W)`);
            compatibilityMessages.push(`‚ö†Ô∏è Ngu·ªìn c√≥ th·ªÉ kh√¥ng ƒë·ªß c√¥ng su·∫•t! N√™n d√πng ngu·ªìn √≠t nh·∫•t ${totalEstimatedPower + 100}W`);
            
            // Ch·ªçn PSU c√≥ c√¥ng su·∫•t cao h∆°n
            const higherPSUs = ['VSP750', 'DT850'];
            for (const psuId of higherPSUs) {
                updateDropdownEnhanced('psu', psuId);
                compatibilityMessages.push(`‚úÖ ƒê√£ ch·ªçn ngu·ªìn m·∫°nh h∆°n: ${psuId}`);
                break;
            }
        } else {
            compatibilityMessages.push(`‚úÖ Ngu·ªìn ƒë·ªß c√¥ng su·∫•t cho h·ªá th·ªëng`);
        }
    }
    
    // Hi·ªÉn th·ªã c√°c th√¥ng b√°o ph√π h·ª£p
    const socketMessage = document.getElementById('socket-message');
    if (socketMessage) {
        socketMessage.innerHTML = compatibilityMessages.join('<br>');
        socketMessage.style.display = 'block';
        socketMessage.style.backgroundColor = '#e7f3fe';
        socketMessage.style.border = '1px solid #b6dcfe';
        socketMessage.style.color = '#0c5460';
        socketMessage.style.padding = '10px';
        socketMessage.style.borderRadius = '5px';
        socketMessage.style.marginTop = '10px';
        socketMessage.style.marginBottom = '10px';
    }
    
    console.log('‚úÖ Ki·ªÉm tra t∆∞∆°ng th√≠ch ho√†n t·∫•t');
    return compatibilityMessages;
}

// Hi·ªÉn th·ªã th√¥ng tin b·∫£o h√†nh v√† t√¨nh tr·∫°ng c·ªßa c√°c linh ki·ªán
function displayWarrantyInfo(cpuData, mainboardData, ramData, vgaData, psuData, ssdData, caseData, coolerData) {
    // T·∫°o ho·∫∑c c·∫≠p nh·∫≠t b·∫£ng th√¥ng tin b·∫£o h√†nh
    let warrantyTable = document.getElementById('warranty-info-table');
    
    if (!warrantyTable) {
        // T·∫°o b·∫£ng m·ªõi n·∫øu ch∆∞a t·ªìn t·∫°i
        warrantyTable = document.createElement('table');
        warrantyTable.id = 'warranty-info-table';
        warrantyTable.className = 'warranty-table';
        warrantyTable.style.width = '100%';
        warrantyTable.style.borderCollapse = 'collapse';
        warrantyTable.style.marginTop = '20px';
        warrantyTable.style.marginBottom = '20px';
        warrantyTable.style.border = '1px solid #ddd';
        
        // T·∫°o header cho b·∫£ng
        const thead = document.createElement('thead');
        thead.innerHTML = `
            <tr style="background-color: #007bff; color: white;">
                <th style="padding: 8px; text-align: left; border: 1px solid #ddd;">LINH KI·ªÜN</th>
                <th style="padding: 8px; text-align: center; border: 1px solid #ddd;">TH√ÄNH TI·ªÄN</th>
                <th style="padding: 8px; text-align: center; border: 1px solid #ddd;">B·∫¢O H√ÄNH</th>
                <th style="padding: 8px; text-align: center; border: 1px solid #ddd;">GHI CH√ö</th>
            </tr>
        `;
        warrantyTable.appendChild(thead);
        
        // T·∫°o ph·∫ßn th√¢n b·∫£ng
        const tbody = document.createElement('tbody');
        tbody.id = 'warranty-info-tbody';
        warrantyTable.appendChild(tbody);
        
        // Th√™m b·∫£ng v√†o DOM
        const configTable = document.getElementById('config-table');
        if (configTable) {
            configTable.parentNode.insertBefore(warrantyTable, configTable.nextSibling);
        } else {
            const socketMessage = document.getElementById('socket-message');
            if (socketMessage) {
                socketMessage.parentNode.insertBefore(warrantyTable, socketMessage.nextSibling);
            } else {
                // Th√™m v√†o ph·∫ßn t·ª≠ main ho·∫∑c body n·∫øu kh√¥ng t√¨m th·∫•y v·ªã tr√≠ ph√π h·ª£p
                document.querySelector('main') || document.body.appendChild(warrantyTable);
            }
        }
    }
    
    // C·∫≠p nh·∫≠t n·ªôi dung b·∫£ng
    const tbody = document.getElementById('warranty-info-tbody');
    if (!tbody) return;
    
    tbody.innerHTML = '';
    
    // Th√™m d√≤ng cho CPU
    if (cpuData) {
        addWarrantyRow(tbody, 'CPU', cpuData);
    }
    
    // Th√™m d√≤ng cho Mainboard
    if (mainboardData) {
        addWarrantyRow(tbody, 'Mainboard', mainboardData);
    }
    
    // Th√™m d√≤ng cho RAM
    if (ramData) {
        addWarrantyRow(tbody, 'RAM', ramData);
    }
    
    // Th√™m d√≤ng cho VGA
    if (vgaData) {
        addWarrantyRow(tbody, 'VGA', vgaData);
    }
    
    // Th√™m d√≤ng cho SSD
    if (ssdData) {
        addWarrantyRow(tbody, 'SSD', ssdData);
    }
    
    // Th√™m d√≤ng cho PSU
    if (psuData) {
        addWarrantyRow(tbody, 'Ngu·ªìn', psuData);
    }
    
    // Th√™m d√≤ng cho Case
    if (caseData) {
        addWarrantyRow(tbody, 'V·ªè case', caseData);
    }
    
    // Th√™m d√≤ng cho CPU Cooler
    if (coolerData) {
        addWarrantyRow(tbody, 'T·∫£n nhi·ªát CPU', coolerData);
    }
    
    // Hi·ªÉn th·ªã b·∫£ng b·∫£o h√†nh
    warrantyTable.style.display = 'table';
}

// H√†m th√™m d√≤ng v√†o b·∫£ng b·∫£o h√†nh
function addWarrantyRow(tbody, componentType, componentData) {
    const row = document.createElement('tr');
    
    // X√°c ƒë·ªãnh th√¥ng tin b·∫£o h√†nh v√† t√¨nh tr·∫°ng
    const warranty = componentData.warranty || '36 th√°ng';
    const condition = componentData.condition || 'NEW';
    
    // ƒê·ªãnh d·∫°ng gi√° ti·ªÅn
    const price = componentData.price ? componentData.price.toLocaleString() + ' VNƒê' : '';
    
    // T·∫°o n·ªôi dung cho d√≤ng
    row.innerHTML = `
        <td style="padding: 8px; text-align: left; border: 1px solid #ddd;">${componentData.name || componentType}</td>
        <td style="padding: 8px; text-align: right; border: 1px solid #ddd;">${price}</td>
        <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">${warranty}</td>
        <td style="padding: 8px; text-align: center; border: 1px solid #ddd;">${condition}</td>
    `;
    
    tbody.appendChild(row);
}

// Ki·ªÉm tra v√† ch·∫°y t·ª± ƒë·ªông ch·ªçn c·∫•u h√¨nh khi ƒë·ªß 3 ti√™u ch√≠
async function checkAndRunAutoSelectEnhanced() {
    const gameGenre = document.getElementById('game-genre').value;
    const budget = parseInt(document.getElementById('budget-range').value);
    const cpuType = document.getElementById('cpu-type').value;
    
    console.log('Checking criteria for auto-selection:');
    console.log('- Game:', gameGenre);
    console.log('- Budget:', budget);
    console.log('- CPU Type:', cpuType);
    
    if (gameGenre && budget && cpuType) {
        console.log('‚úÖ All criteria met. Running enhanced autoSelectConfig.');
        try {
            // Ch·∫°y h√†m t·ª± ƒë·ªông ch·ªçn c·∫•u h√¨nh n√¢ng cao
            const result = await autoSelectConfigEnhanced(gameGenre, budget, cpuType);
            
            // N·∫øu kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh, ch·ªçn linh ki·ªán m·∫∑c ƒë·ªãnh
            if (!result) {
                console.log('‚ùå Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh c·ª• th·ªÉ, s·∫Ω ch·ªçn linh ki·ªán m·∫∑c ƒë·ªãnh ph√π h·ª£p');
                await selectDefaultComponents(cpuType);
            }
            
            // Lu√¥n ki·ªÉm tra t∆∞∆°ng th√≠ch gi·ªØa c√°c linh ki·ªán, k·ªÉ c·∫£ khi kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh
            setTimeout(() => {
                if (typeof ensureCompatibleComponents === 'function') {
                    ensureCompatibleComponents();
                }
            }, 500);
            
        } catch (error) {
            console.error('Error in enhanced autoSelectConfig:', error);
            
            // N·∫øu c√≥ l·ªói, v·∫´n c·ªë g·∫Øng ch·ªçn linh ki·ªán m·∫∑c ƒë·ªãnh
            await selectDefaultComponents(cpuType);
        }
    } else {
        console.log('‚ùå Not all criteria are met for auto-selection.');
    }
}

// Ch·ªçn linh ki·ªán m·∫∑c ƒë·ªãnh d·ª±a tr√™n lo·∫°i CPU
async function selectDefaultComponents(cpuType) {
    try {
        console.log(`Selecting default components for ${cpuType} CPU...`);
        
        // Ch·ªçn CPU m·∫∑c ƒë·ªãnh
        if (cpuType.toLowerCase() === 'intel') {
            // Intel CPU m·∫∑c ƒë·ªãnh
            const intelCPUs = ['i3-12100F', 'i5-12400F', 'i5-13400F', 'i5-13600KF'];
            for (const cpuId of intelCPUs) {
                const success = updateDropdownEnhanced('cpu', cpuId);
                if (success) {
                    console.log(`‚úÖ Selected default Intel CPU: ${cpuId}`);
                    break;
                }
            }
            
            // Intel Mainboard m·∫∑c ƒë·ªãnh
            const intelMainboards = ['MSI-H610', 'HNZ-H610', 'ASUS-B760', 'MSI-B760'];
            for (const mainboardId of intelMainboards) {
                const success = updateDropdownEnhanced('mainboard', mainboardId);
                if (success) {
                    console.log(`‚úÖ Selected default Intel mainboard: ${mainboardId}`);
                    break;
                }
            }
        } else {
            // AMD CPU m·∫∑c ƒë·ªãnh
            const amdCPUs = ['R5-3600', 'R5-5600X', 'R5-7600', 'R7-5700X'];
            for (const cpuId of amdCPUs) {
                const success = updateDropdownEnhanced('cpu', cpuId);
                if (success) {
                    console.log(`‚úÖ Selected default AMD CPU: ${cpuId}`);
                    break;
                }
            }
            
            // AMD Mainboard m·∫∑c ƒë·ªãnh
            const amdMainboards = ['GIGA-B450', 'JGINYUE-B450', 'GIGA-B550', 'JGINYUE-B650'];
            for (const mainboardId of amdMainboards) {
                const success = updateDropdownEnhanced('mainboard', mainboardId);
                if (success) {
                    console.log(`‚úÖ Selected default AMD mainboard: ${mainboardId}`);
                    break;
                }
            }
        }
        
        // Ch·ªçn RAM m·∫∑c ƒë·ªãnh (c·∫£ DDR4 v√† DDR5)
        const defaultRams = ['cosair-16', 'fury-16', 'adata-16', 'Cosair-16-5200'];
        for (const ramId of defaultRams) {
            const success = updateDropdownEnhanced('ram', ramId);
            if (success) {
                console.log(`‚úÖ Selected default RAM: ${ramId}`);
                break;
            }
        }
        
        // Ch·ªçn VGA m·∫∑c ƒë·ªãnh
        const defaultVGAs = ['GTX1650', 'RTX3050', 'RX6600', 'GTX1660S'];
        for (const vgaId of defaultVGAs) {
            const success = updateDropdownEnhanced('vga', vgaId);
            if (success) {
                console.log(`‚úÖ Selected default VGA: ${vgaId}`);
                break;
            }
        }
        
        // Ch·ªçn SSD m·∫∑c ƒë·ªãnh
        const defaultSSDs = ['nvme-512', 'kingston-500', 'lexar-512', 'samsung-500'];
        for (const ssdId of defaultSSDs) {
            const success = updateDropdownEnhanced('ssd', ssdId);
            if (success) {
                console.log(`‚úÖ Selected default SSD: ${ssdId}`);
                break;
            }
        }
        
        // Ch·ªçn Case m·∫∑c ƒë·ªãnh
        const defaultCases = ['DLX21', 'G360F', 'DLM21', 'Antec-NX292'];
        for (const caseId of defaultCases) {
            const success = updateDropdownEnhanced('case', caseId);
            if (success) {
                console.log(`‚úÖ Selected default Case: ${caseId}`);
                break;
            }
        }
        
        // Ch·ªçn Ngu·ªìn m·∫∑c ƒë·ªãnh
        const defaultPSUs = ['VSP650', 'VSP550', 'DT650', 'DT750'];
        for (const psuId of defaultPSUs) {
            const success = updateDropdownEnhanced('psu', psuId);
            if (success) {
                console.log(`‚úÖ Selected default PSU: ${psuId}`);
                break;
            }
        }
        
        // Ch·ªçn CPU Cooler m·∫∑c ƒë·ªãnh
        const defaultCoolers = ['CR1000', 'AIR01', '2ongdong', 'STOCK'];
        for (const coolerId of defaultCoolers) {
            const success = updateDropdownEnhanced('cpuCooler', coolerId);
            if (success) {
                console.log(`‚úÖ Selected default CPU Cooler: ${coolerId}`);
                break;
            }
        }
        
        // Ki·ªÉm tra t∆∞∆°ng th√≠ch gi·ªØa c√°c linh ki·ªán sau khi ch·ªçn
        setTimeout(() => {
            if (typeof ensureCompatibleComponents === 'function') {
                ensureCompatibleComponents();
                console.log('‚úÖ Component compatibility checked after default selection');
            }
            
            // C·∫≠p nh·∫≠t gi√°
            if (typeof updateComponentPricesFixed === 'function') {
                updateComponentPricesFixed();
                console.log('‚úÖ Price updated after default selection');
            }
        }, 500);
        
        return true;
    } catch (error) {
        console.error('Error selecting default components:', error);
        return false;
    }
}

// Xu·∫•t c√°c h√†m ƒë·ªÉ s·ª≠ d·ª•ng trong c√°c module kh√°c
if (typeof window !== 'undefined') {
    window.updateDropdownEnhanced = updateDropdownEnhanced;
    window.autoSelectConfigEnhanced = autoSelectConfigEnhanced;
    window.checkAndRunAutoSelectEnhanced = checkAndRunAutoSelectEnhanced;
    window.ensureCompatibleComponents = ensureCompatibleComponents;
    
    // Ghi ƒë√® l√™n c√°c h√†m c≈© ƒë·ªÉ c·∫£i thi·ªán ch·ª©c nƒÉng
    window.updateDropdown = updateDropdownEnhanced;
    window.autoSelectConfig = autoSelectConfigEnhanced;
    window.checkAndRunAutoSelect = checkAndRunAutoSelectEnhanced;
    
    console.log('Enhanced auto-config functions registered successfully');
}

// Khi trang t·∫£i xong, ch·ªâ ƒëƒÉng k√Ω s·ª± ki·ªán, kh√¥ng t·ª± ƒë·ªông ch·ªçn c·∫•u h√¨nh
document.addEventListener('DOMContentLoaded', function() {
    console.log('Initializing enhanced auto-config helper');
    
    // Kh√¥ng t·ª± ƒë·ªông ch·ªçn c·∫•u h√¨nh khi trang t·∫£i xong
    // setTimeout(checkAndRunAutoSelectEnhanced, 1500); // ƒê√£ t·∫Øt t√≠nh nƒÉng t·ª± ƒë·ªông ch·ªçn
    
    // Th√™m event listeners cho c√°c thay ƒë·ªïi
    const gameGenre = document.getElementById('game-genre');
    const budgetRange = document.getElementById('budget-range');
    const cpuType = document.getElementById('cpu-type');
    
    if (gameGenre) {
        gameGenre.addEventListener('change', function() {
            checkAndRunAutoSelectEnhanced().catch(e => console.error('Error in autoSelect after game change:', e));
        });
    }
    
    if (budgetRange) {
        budgetRange.addEventListener('change', function() {
            checkAndRunAutoSelectEnhanced().catch(e => console.error('Error in autoSelect after budget change:', e));
        });
        
        budgetRange.addEventListener('input', function() {
            // C·∫≠p nh·∫≠t hi·ªÉn th·ªã ng√¢n s√°ch
            const budgetValue = document.getElementById('budget-value');
            if (budgetValue) {
                const budgetInMillion = parseInt(this.value) / 1000000;
                budgetValue.textContent = budgetInMillion + ' tri·ªáu';
            }
        });
    }
    
    if (cpuType) {
        cpuType.addEventListener('change', function() {
            checkAndRunAutoSelectEnhanced().catch(e => console.error('Error in autoSelect after CPU type change:', e));
        });
    }
    
    console.log('Enhanced auto-config event listeners registered successfully');
}); 