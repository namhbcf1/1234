async function loadComponentData() {
    try {
        console.log('üîÑ ƒêang t·∫£i d·ªØ li·ªáu linh ki·ªán t·ª´ js/data...');
        
        // T·∫£i d·ªØ li·ªáu linh ki·ªán t·ª´ c√°c t·ªáp
        const cpuModule = await import('./js/data/cpu.js').catch(e => console.error('Failed to load CPU data:', e));
        const mainboardModule = await import('./js/data/mainboard.js').catch(e => console.error('Failed to load mainboard data:', e));
        const ramModule = await import('./js/data/ram.js').catch(e => console.error('Failed to load RAM data:', e));
        const vgaModule = await import('./js/data/vga.js').catch(e => console.error('Failed to load VGA data:', e));
        const ssdModule = await import('./js/data/ssd.js').catch(e => console.error('Failed to load SSD data:', e));
        const psuModule = await import('./js/data/psu.js').catch(e => console.error('Failed to load PSU data:', e));
        const caseModule = await import('./js/data/case.js').catch(e => console.error('Failed to load case data:', e));
        const cpuCoolerModule = await import('./js/data/cpuCooler.js').catch(e => console.error('Failed to load CPU cooler data:', e));
        const hddModule = await import('./js/data/hdd.js').catch(e => console.error('Failed to load HDD data:', e));
        const monitorModule = await import('./js/data/monitor.js').catch(e => console.error('Failed to load monitor data:', e));
        const configsModule = await import('./js/configs/index.js').catch(e => console.error('Failed to load configs:', e));

        // Ki·ªÉm tra n·∫øu b·∫•t k·ª≥ module n√†o kh√¥ng t·∫£i ƒë∆∞·ª£c
        if (!cpuModule || !vgaModule) {
            console.error('‚ùå Kh√¥ng th·ªÉ t·∫£i c√°c module d·ªØ li·ªáu quan tr·ªçng.');
            return false;
        } else {
            // G√°n d·ªØ li·ªáu v√†o ƒë·ªëi t∆∞·ª£ng window
            window.cpuData = cpuModule && cpuModule.cpuData ? { ...cpuModule.cpuData } : {};
            window.mainboardData = mainboardModule && mainboardModule.mainboardData ? { ...mainboardModule.mainboardData } : {};
            window.ramData = ramModule && ramModule.ramData ? { ...ramModule.ramData } : {};
            window.vgaData = vgaModule && vgaModule.vgaData ? { ...vgaModule.vgaData } : {};
            window.ssdData = ssdModule && ssdModule.ssdData ? { ...ssdModule.ssdData } : {};
            window.psuData = psuModule && psuModule.psuData ? { ...psuModule.psuData } : {};
            window.caseData = caseModule && caseModule.caseData ? { ...caseModule.caseData } : {};
            window.cpuCoolerData = cpuCoolerModule && cpuCoolerModule.cpuCoolerData ? { ...cpuCoolerModule.cpuCoolerData } : {};
            window.hddData = hddModule && hddModule.hddData ? { ...hddModule.hddData } : {};
            window.monitorData = monitorModule && monitorModule.monitorData ? { ...monitorModule.monitorData } : {};
            
            // Log s·ªë l∆∞·ª£ng m·ª•c ƒë∆∞·ª£c t·∫£i cho m·ªói lo·∫°i linh ki·ªán
            console.log('‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu linh ki·ªán:');
            console.log(`- CPU: ${Object.keys(window.cpuData).length} m·ª•c`);
            console.log(`- Mainboard: ${Object.keys(window.mainboardData).length} m·ª•c`);
            console.log(`- VGA: ${Object.keys(window.vgaData).length} m·ª•c`);
            console.log(`- RAM: ${Object.keys(window.ramData).length} m·ª•c`);
            console.log(`- SSD: ${Object.keys(window.ssdData).length} m·ª•c`);
            console.log(`- PSU: ${Object.keys(window.psuData).length} m·ª•c`);
            console.log(`- Case: ${Object.keys(window.caseData).length} m·ª•c`);
            console.log(`- CPU Cooler: ${Object.keys(window.cpuCoolerData).length} m·ª•c`);
            console.log(`- HDD: ${Object.keys(window.hddData).length} m·ª•c`);
            console.log(`- Monitor: ${Object.keys(window.monitorData).length} m·ª•c`);
            
            // Ph√°t s·ª± ki·ªán ƒë·ªÉ th√¥ng b√°o r·∫±ng d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i
            const componentDataLoadedEvent = new CustomEvent('component-data-loaded', {
                detail: {
                    source: 'js/data',
                    timestamp: new Date().toISOString()
                }
            });
            document.dispatchEvent(componentDataLoadedEvent);
            
            return true;
        }
    } catch (error) {
        console.error('‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu linh ki·ªán:', error);
        return false;
    }
}

// T·∫£i d·ªØ li·ªáu ngay khi t·ªáp ƒë∆∞·ª£c th·ª±c thi
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ B·∫Øt ƒë·∫ßu t·∫£i d·ªØ li·ªáu linh ki·ªán...');
    loadComponentData();
});

// Xu·∫•t h√†m ra b√™n ngo√†i
export { loadComponentData };

// ƒê·∫£m b·∫£o t∆∞∆°ng th√≠ch ng∆∞·ª£c v·ªõi c√°c t√≠nh nƒÉng c≈©
// C·∫ßu n·ªëi v·ªõi code c≈© s·ª≠ d·ª•ng window.getConfig, window.intelConfigs, window.amdConfigs
window.getConfig = async function(cpuType, gameId, budgetKey) {
    console.warn('‚ö†Ô∏è Deprecated: window.getConfig is being used, should migrate to dynamic import');
    
    try {
        // Chuy·ªÉn ƒë·ªïi budget sang ƒë·ªãnh d·∫°ng chu·∫©n
        if (typeof budgetKey === 'number') {
            budgetKey = `${budgetKey}M`;
        } else if (typeof budgetKey === 'string' && /^[0-9]+$/.test(budgetKey)) {
            budgetKey = `${budgetKey}M`;
        }
        
        // Chu·∫©n h√≥a CPU type
        const finalCpuType = cpuType.toLowerCase().includes('amd') ? 'amd' : 'intel';
        
        // Import ƒë·ªông file c·∫•u h√¨nh
        const configPath = `./js/configs/${finalCpuType}/${gameId}.js`;
        console.log(`üîç ƒêang t√¨m file c·∫•u h√¨nh qua getConfig: ${configPath}`);
        
        const configModule = await import(configPath).catch(e => {
            console.error(`‚ùå Kh√¥ng th·ªÉ import file c·∫•u h√¨nh ${configPath}:`, e);
            return null;
        });
        
        if (!configModule) return null;
        
        // X·ª≠ l√Ω c√°c lo·∫°i export kh√°c nhau
        let configResult = null;
        
        if (configModule.configs) {
            configResult = configModule.configs[budgetKey];
        } else if (configModule.config) {
            configResult = configModule.config[budgetKey];
        } else if (configModule.default) {
            const defaultConfig = typeof configModule.default === 'function' 
                ? configModule.default(budgetKey) 
                : configModule.default;
            configResult = defaultConfig[budgetKey];
        }
        
        return configResult;
    } catch (e) {
        console.error('Error in legacy getConfig:', e);
        return null;
    }
};

// T·∫°o ƒë·ªëi t∆∞·ª£ng gi·∫£ cho window.intelConfigs v√† window.amdConfigs
// Ch·ªâ ƒë·ªÉ t∆∞∆°ng th√≠ch ng∆∞·ª£c v·ªõi code c≈©
const createProxyConfigs = (cpuType) => {
    return new Proxy({}, {
        get: function(target, gameId) {
            console.warn(`‚ö†Ô∏è Deprecated: window.${cpuType}Configs is being accessed, should migrate to dynamic import`);
            if (typeof gameId !== 'string' || gameId === 'length' || gameId.startsWith('_')) {
                return undefined;
            }
            
            // Tr·∫£ v·ªÅ m·ªôt proxy cho m·ªói game
            return new Proxy({}, {
                get: function(target, budgetKey) {
                    if (typeof budgetKey !== 'string' || budgetKey === 'length' || budgetKey.startsWith('_')) {
                        return undefined;
                    }
                    
                    // Khi truy c·∫≠p ƒë·∫øn budget, t·∫£i ƒë·ªông file
                    console.log(`üîç Truy c·∫≠p qua window.${cpuType}Configs['${gameId}']['${budgetKey}']`);
                    
                    // Kh√¥ng th·ªÉ d√πng await ·ªü ƒë√¢y, n√™n tr·∫£ v·ªÅ null
                    // Trong th·ª±c t·∫ø, code s·ª≠ d·ª•ng c√°ch n√†y ƒë√£ ƒë∆∞·ª£c thay th·∫ø b·∫±ng dynamic import
                    return null;
                }
            });
        }
    });
};

window.intelConfigs = createProxyConfigs('intel');
window.amdConfigs = createProxyConfigs('amd'); 