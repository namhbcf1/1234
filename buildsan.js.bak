// Import d·ªØ li·ªáu linh ki·ªán t·ª´ c√°c file ri√™ng l·∫ª
import {
    cpuData,
    mainboardData,
    vgaData,
    ramData,
    ssdData,
    psuData,
    caseData,
    cpuCoolerData,
    monitorData,
    hddData
} from './js/data/index.js';

// Import c√°c c·∫•u h√¨nh budget t·ª´ module configs
import { getConfig, intelConfigs, amdConfigs } from './js/configs/index.js';

// ƒê·∫£m b·∫£o c√°c bi·∫øn ƒë√°nh gi√° hi·ªáu nƒÉng l√† bi·∫øn to√†n c·ª•c - Fix cho Chrome

// Define GAME_FPS_ESTIMATES object
window.GAME_FPS_ESTIMATES = {
    'lol': {
        low: { fps: '120-180', description: 'C√†i ƒë·∫∑t th·∫•p' },
        medium: { fps: '100-140', description: 'C√†i ƒë·∫∑t trung b√¨nh' },
        high: { fps: '80-120', description: 'C√†i ƒë·∫∑t cao' },
        ultra: { fps: '60-100', description: 'C√†i ƒë·∫∑t t·ªëi ƒëa' },
        notes: 'Game nh·∫π, ch·∫°y t·ªët v·ªõi h·∫ßu h·∫øt c·∫•u h√¨nh.'
    },
    'valorant': {
        low: { fps: '144-240', description: 'C√†i ƒë·∫∑t th·∫•p' },
        medium: { fps: '120-180', description: 'C√†i ƒë·∫∑t trung b√¨nh' },
        high: { fps: '100-144', description: 'C√†i ƒë·∫∑t cao' },
        ultra: { fps: '90-120', description: 'C√†i ƒë·∫∑t t·ªëi ƒëa' },
        notes: 'Game t·ªëi ∆∞u t·ªët, c·∫ßn CPU m·∫°nh ƒë·ªÉ ƒë·∫°t FPS cao.'
    },
    'csgo': {
        low: { fps: '180-300', description: 'C√†i ƒë·∫∑t th·∫•p' },
        medium: { fps: '150-250', description: 'C√†i ƒë·∫∑t trung b√¨nh' },
        high: { fps: '120-200', description: 'C√†i ƒë·∫∑t cao' },
        ultra: { fps: '100-180', description: 'C√†i ƒë·∫∑t t·ªëi ƒëa' },
        notes: 'Game ph·ª• thu·ªôc nhi·ªÅu v√†o CPU.'
    },
    'pubg': {
        low: { fps: '80-120', description: 'C√†i ƒë·∫∑t th·∫•p' },
        medium: { fps: '60-100', description: 'C√†i ƒë·∫∑t trung b√¨nh' },
        high: { fps: '50-80', description: 'C√†i ƒë·∫∑t cao' },
        ultra: { fps: '40-60', description: 'C√†i ƒë·∫∑t t·ªëi ƒëa' },
        notes: 'Game ƒë√≤i h·ªèi c·∫£ CPU v√† GPU m·∫°nh.'
    },
    'gta-v': {
        low: { fps: '70-100', description: 'C√†i ƒë·∫∑t th·∫•p' },
        medium: { fps: '60-80', description: 'C√†i ƒë·∫∑t trung b√¨nh' },
        high: { fps: '45-70', description: 'C√†i ƒë·∫∑t cao' },
        ultra: { fps: '35-60', description: 'C√†i ƒë·∫∑t t·ªëi ƒëa' },
        notes: 'Game ƒë√≤i h·ªèi c·∫£ CPU v√† GPU m·∫°nh, VRAM cao.'
    },
    'fortnite': {
        low: { fps: '120-180', description: 'C√†i ƒë·∫∑t th·∫•p' },
        medium: { fps: '90-140', description: 'C√†i ƒë·∫∑t trung b√¨nh' },
        high: { fps: '70-100', description: 'C√†i ƒë·∫∑t cao' },
        ultra: { fps: '60-90', description: 'C√†i ƒë·∫∑t t·ªëi ƒëa' },
        notes: 'Game t·ªëi ∆∞u t·ªët, c·∫ßn GPU t·ªët cho c√†i ƒë·∫∑t cao.'
    },
    'apex': {
        low: { fps: '100-140', description: 'C√†i ƒë·∫∑t th·∫•p' },
        medium: { fps: '80-120', description: 'C√†i ƒë·∫∑t trung b√¨nh' },
        high: { fps: '60-90', description: 'C√†i ƒë·∫∑t cao' },
        ultra: { fps: '50-70', description: 'C√†i ƒë·∫∑t t·ªëi ƒëa' },
        notes: 'Game ƒë√≤i h·ªèi GPU m·∫°nh.'
    },
    'dota2': {
        low: { fps: '120-180', description: 'C√†i ƒë·∫∑t th·∫•p' },
        medium: { fps: '100-150', description: 'C√†i ƒë·∫∑t trung b√¨nh' },
        high: { fps: '80-120', description: 'C√†i ƒë·∫∑t cao' },
        ultra: { fps: '70-100', description: 'C√†i ƒë·∫∑t t·ªëi ƒëa' },
        notes: 'Game ch·∫°y t·ªët v·ªõi h·∫ßu h·∫øt c·∫•u h√¨nh.'
    },
    'elden-ring': {
        low: { fps: '50-70', description: 'C√†i ƒë·∫∑t th·∫•p' },
        medium: { fps: '45-60', description: 'C√†i ƒë·∫∑t trung b√¨nh' },
        high: { fps: '40-55', description: 'C√†i ƒë·∫∑t cao' },
        ultra: { fps: '30-45', description: 'C√†i ƒë·∫∑t t·ªëi ƒëa' },
        notes: 'Game ƒë√≤i h·ªèi c·∫•u h√¨nh m·∫°nh.'
    },
    'cyberpunk': {
        low: { fps: '45-60', description: 'C√†i ƒë·∫∑t th·∫•p' },
        medium: { fps: '35-50', description: 'C√†i ƒë·∫∑t trung b√¨nh' },
        high: { fps: '25-40', description: 'C√†i ƒë·∫∑t cao' },
        ultra: { fps: '20-30', description: 'C√†i ƒë·∫∑t t·ªëi ƒëa' },
        notes: 'Game r·∫•t n·∫∑ng, c·∫ßn GPU m·∫°nh v√† VRAM cao.'
    }
};

// Define GAME_TYPES object
window.GAME_TYPES = {
    'lol': { type: 'esports', cpuDependency: 'medium' },
    'valorant': { type: 'esports', cpuDependency: 'high' },
    'csgo': { type: 'esports', cpuDependency: 'high' },
    'pubg': { type: 'battle-royale', cpuDependency: 'high' },
    'fortnite': { type: 'battle-royale', cpuDependency: 'medium' },
    'cyberpunk': { type: 'aaa', cpuDependency: 'high' },
    'gta-v': { type: 'aaa', cpuDependency: 'high' },
    'apex': { type: 'battle-royale', cpuDependency: 'high' },
    'dota2': { type: 'esports', cpuDependency: 'medium' },
    'elden-ring': { type: 'aaa', cpuDependency: 'high' }
};

const components = {
    cpu: cpuData,
    mainboard: mainboardData,
    vga: vgaData,
    ram: ramData,
    ssd: ssdData,
    psu: psuData,
    case: caseData,
    cpuCooler: cpuCoolerData,
    hdd: hddData,
    monitor: monitorData
};

// Khai b√°o bi·∫øn to√†n c·ª•c
let isAutoSelecting = false;

// Add event listener for the game-genre dropdown as soon as the DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    const gameGenreDropdown = document.getElementById('game-genre');
    if (gameGenreDropdown) {
        gameGenreDropdown.addEventListener('change', function() {
            console.log("üéÆ Game genre changed to:", this.value);
            console.log("Calling autoSelectConfig after game change");
            // Call the debug function first
            debugSelections();
            // Then try to auto-select with proper parameters
            const gameId = document.getElementById("game-genre").value;
            const budget = parseInt(document.getElementById("budget-range").value);
            const cpuType = document.getElementById("cpu-type").value;
            autoSelectConfig(gameId, budget, cpuType);
        });
        console.log("‚úÖ Successfully attached event listener to game-genre dropdown");
    } else {
        console.error("‚ùå Could not find game-genre dropdown on page load");
    }
    
    // Debug function to check all necessary selections
    window.debugSelections = function() {
        console.log("--------- DEBUG SELECTIONS ---------");
        const gameDropdown = document.getElementById('game-genre');
        const budgetRange = document.getElementById('budget-range');
        const cpuTypeDropdown = document.getElementById('cpu-type');
        
        console.log("Elements found:");
        console.log("- Game dropdown:", gameDropdown ? "‚úÖ" : "‚ùå");
        console.log("- Budget range:", budgetRange ? "‚úÖ" : "‚ùå");
        console.log("- CPU type dropdown:", cpuTypeDropdown ? "‚úÖ" : "‚ùå");
        
        if (gameDropdown && budgetRange && cpuTypeDropdown) {
            console.log("Current values:");
            console.log("- Game:", gameDropdown.value || "not selected");
            console.log("- Budget:", budgetRange.value ? `${parseInt(budgetRange.value)/1000000}M` : "not set");
            console.log("- CPU type:", cpuTypeDropdown.value || "not selected");
            
            // Check if all values are valid for auto-selection
            const gameValid = gameDropdown.value && gameDropdown.value.trim() !== "";
            const budgetValid = budgetRange.value && !isNaN(parseInt(budgetRange.value));
            const cpuTypeValid = cpuTypeDropdown.value && cpuTypeDropdown.value.trim() !== "";
            
            console.log("Values valid for auto-selection:");
            console.log("- Game:", gameValid ? "‚úÖ" : "‚ùå");
            console.log("- Budget:", budgetValid ? "‚úÖ" : "‚ùå");
            console.log("- CPU type:", cpuTypeValid ? "‚úÖ" : "‚ùå");
            
            if (gameValid && budgetValid && cpuTypeValid) {
                console.log("‚úÖ All values are valid for auto-selection");
                
                // Check if configuration exists
                const cpuType = cpuTypeDropdown.value.trim();
                const game = gameDropdown.value.trim();
                const budgetInMillions = parseInt(budgetRange.value) / 1000000;
                
                // Check in configs
                let configExists = false;
                if (cpuType === 'Intel' && intelConfigs[game]) {
                    const budgetKey = `${budgetInMillions}M`;
                    if (intelConfigs[game][budgetKey]) {
                        configExists = true;
                        console.log(`‚úÖ Configuration found for Intel, ${game}, ${budgetKey}`);
                    } else {
                        console.log(`‚ùå No configuration found for Intel, ${game}, ${budgetKey}`);
                        console.log("Available budgets:", Object.keys(intelConfigs[game]));
                    }
                } else if (cpuType === 'Amd' && amdConfigs[game]) {
                    const budgetKey = `${budgetInMillions}M`;
                    if (amdConfigs[game][budgetKey]) {
                        configExists = true;
                        console.log(`‚úÖ Configuration found for AMD, ${game}, ${budgetKey}`);
                    } else {
                        console.log(`‚ùå No configuration found for AMD, ${game}, ${budgetKey}`);
                        console.log("Available budgets:", Object.keys(amdConfigs[game]));
                    }
                } else {
                    console.log(`‚ùå No configurations found for ${cpuType}, ${game}`);
                    if (cpuType === 'Intel') {
                        console.log("Available Intel games:", Object.keys(intelConfigs));
                    } else if (cpuType === 'Amd') {
                        console.log("Available AMD games:", Object.keys(amdConfigs));
                    }
                }
            } else {
                console.log("‚ùå Some values are not valid for auto-selection");
            }
        }
        console.log("-------- END DEBUG --------");
    };
});

// Fallback function for images that fail to load
function handleImageError(img) {
    // Set a default color based on component type
    const componentType = img.dataset.componentType || 'default';
    const bgColors = {
        cpu: '#3498db',
        mainboard: '#2ecc71',
        vga: '#e74c3c',
        ram: '#f39c12',
        ssd: '#9b59b6',
        hdd: '#34495e',
        case: '#1abc9c',
        psu: '#d35400',
        cpuCooler: '#7f8c8d',
        monitor: '#2c3e50',
        default: '#95a5a6'
    };
    
    // Create a canvas to use as the img src
    const canvas = document.createElement('canvas');
    canvas.width = 200;
    canvas.height = 150;
    const ctx = canvas.getContext('2d');
    
    // Fill background
    ctx.fillStyle = bgColors[componentType];
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    
    // Add text
    ctx.fillStyle = '#ffffff';
    ctx.font = '14px Arial';
    ctx.textAlign = 'center';
    ctx.fillText(img.alt || componentType, canvas.width/2, canvas.height/2);
    
    // Replace the img src with the canvas data
    img.src = canvas.toDataURL('image/png');
    
    // Prevent further error handling
    img.onerror = null;
}

// Gi·∫£ s·ª≠ c√°c d·ªØ li·ªáu components ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a ƒë·∫ßy ƒë·ªß




document.addEventListener('DOMContentLoaded', function () {
    document.getElementById("budget-range").addEventListener("input", function () {
        let value = parseInt(this.value);
        let formattedValue = new Intl.NumberFormat("vi-VN", { style: "currency", currency: "VND" }).format(value);
        document.getElementById("budget-value").innerText = formattedValue.replace("‚Ç´", "") + " tri·ªáu";
    });
    // Khai b√°o c√°c ph·∫ßn t·ª≠ DOM
    const componentSelects = {
        cpu: document.getElementById('cpu'),
        mainboard: document.getElementById('mainboard'),
        vga: document.getElementById('vga'),
        ram: document.getElementById('ram'),
        ssd: document.getElementById('ssd'),
        psu: document.getElementById('psu'),
        case: document.getElementById('case'),
        cpuCooler: document.getElementById('cpuCooler'),
        hdd: document.getElementById('hdd'),     // <-- ƒê·∫£m b·∫£o c√≥ d√≤ng n√†y
        monitor: document.getElementById('monitor')    // <-- ƒê·∫£m b·∫£o c√≥ d√≤ng n√†y
    };
    Object.entries(componentSelects).forEach(([name, element]) => {
        if (!element) {
            console.error(`Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ #${name}`);
        }
    });
    populateDropdowns('cpu', 'cpu', cpuData);
    populateDropdowns('mainboard', 'mainboard', mainboardData);
    populateDropdowns('vga', 'vga', vgaData);
    populateDropdowns('ram', 'ram', ramData);
    populateDropdowns('ssd', 'ssd', ssdData);
    populateDropdowns('psu', 'psu', psuData);
    populateDropdowns('case', 'case', caseData);
    populateDropdowns('cpuCooler', 'cpuCooler', cpuCoolerData);
    populateDropdowns('hdd', 'hdd', hddData);     // <-- ƒê·∫£m b·∫£o c√≥ d√≤ng n√†y
    populateDropdowns('monitor', 'monitor', monitorData); // <-- ƒê·∫£m b·∫£o c√≥ d√≤ng n√†y

    // C√°c ph·∫ßn t·ª≠ hi·ªÉn th·ªã
    const totalPriceDisplay = document.getElementById('total-price');
    const selectedComponentsList = document.getElementById('selected-components-list');
    const summaryModal = document.getElementById('summary-modal');
    const modalSummaryContent = document.getElementById('modal-components-list'); // S·ª¨A ƒê·ªîI ID CHO ƒê√öNG
    const modalTotalPriceDisplay = document.getElementById('modal-total-price');
    const imagePreviewContainer = document.getElementById('image-preview-container');
    const calculateButton = document.getElementById('calculate-button');


    // Th√™m CSS
    const style = document.createElement('style');
    style.textContent = `
        .component-card {
            border: 1px solid #ddd;
            padding: 15px;
            margin: 10px 0;
            display: flex;
            align-items: center;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .component-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }

        .component-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(
                120deg,
                transparent,
                rgba(255, 255, 255, 0.3),
                transparent
            );
            transition: 0.5s;
        }

        .component-card:hover::before {
            left: 100%;
        }

        .component-image {
            max-width: 100px;
            margin-right: 20px;
            object-fit: contain;
            transition: transform 0.3s ease;
        }

        .component-card:hover .component-image {
            transform: scale(1.1);
        }

        #total-price {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            padding: 15px;
            margin-top: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            animation: priceGlow 2s infinite alternate;
        }

        @keyframes priceGlow {
            from {
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            }
            to {
                box-shadow: 0 2px 20px rgba(0,128,255,0.2);
            }
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 1000;
            animation: modalFade 0.3s ease;
        }

        @keyframes modalFade {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .modal-content {
            background: white;
            padding: 20px;
            width: 90%;
            max-width: 800px;
            margin: 50px auto;
            border-radius: 10px;
            box-shadow: 0 5px 25px rgba(0,0,0,0.2);
            animation: modalSlide 0.3s ease;
        }

        @keyframes modalSlide {
            from {
                transform: translateY(-50px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        .component-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
            animation: tableAppear 0.5s ease;
        }

        @keyframes tableAppear {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .component-table th {
            background: linear-gradient(135deg, #f4f4f4 0%, #e8e8e8 100%);
            font-weight: bold;
            padding: 12px;
            text-align: left;
            border: 1px solid #ddd;
            transition: background-color 0.3s ease;
        }

        .component-table th:hover {
            background: linear-gradient(135deg, #e8e8e8 0%, #f4f4f4 100%);
        }

        .component-table td {
            padding: 12px;
            border: 1px solid #ddd;
            transition: background-color 0.3s ease;
        }

        .component-table tr:hover td {
            background-color: #f8f9fa;
        }

        .component-table img {
            max-width: 70px;
            height: auto;
            display: block;
            margin: auto;
            transition: transform 0.3s ease;
        }

        .component-table img:hover {
            transform: scale(1.2);
        }

        .score-message, .upgrade-message {
            padding: 10px 15px;
            border-radius: 5px;
            margin: 10px 0;
            animation: messageSlide 0.5s ease;
        }

        @keyframes messageSlide {
            from {
                transform: translateX(-20px);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        .score-message {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
            box-shadow: 0 2px 10px rgba(40,167,69,0.2);
        }

        .upgrade-message {
            background: linear-gradient(135deg, #fd7e14 0%, #ffc107 100%);
            color: white;
            box-shadow: 0 2px 10px rgba(253,126,20,0.2);
        }

        .graphics-quality-container {
            display: flex;
            gap: 10px;
            margin: 15px 0;
            animation: qualityAppear 0.5s ease;
        }

        @keyframes qualityAppear {
            from {
                transform: translateY(10px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        .fps-estimate-container {
            background: linear-gradient(135deg, #007bff 0%, #6610f2 100%);
            color: white;
            padding: 15px;
            border-radius: 8px;
            margin: 15px 0;
            animation: fpsGlow 2s infinite alternate;
        }

        @keyframes fpsGlow {
            from {
                box-shadow: 0 2px 10px rgba(0,123,255,0.2);
            }
            to {
                box-shadow: 0 2px 20px rgba(102,16,242,0.4);
            }
        }

        #game-specific-performance {
            padding: 15px;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-radius: 8px;
            margin: 15px 0;
            animation: performanceSlide 0.5s ease;
        }

        @keyframes performanceSlide {
            from {
                transform: translateY(20px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }
    `;
    document.head.appendChild(style);

    function updateSelectedComponents() {
        updateScores()
        selectedComponentsList.innerHTML = '';
        let total = 0;
        const selectedComponentsDetails = []; // Kh·ªüi t·∫°o m·∫£ng ƒë·ªÉ ch·ª©a th√¥ng tin chi ti·∫øt linh ki·ªán

        // T√≠nh to√°n t·ªïng gi√° v√† t·∫°o card
        for (const [type, select] of Object.entries(componentSelects)) {
            const value = select.value;
            if (value && components[type]?.[value]) {
                const component = components[type][value];
                total += component.price;

                const card = document.createElement('div');
                card.className = 'component-card';

                // Create image HTML with error handling
                const imageHtml = component.image 
                    ? `<img src="${component.image}" class="component-image" alt="${component.name}" data-component-type="${type}" onerror="handleImageError(this)">`
                    : `<div class="component-image-placeholder" style="background-color: #f0f0f0; height: 150px; display: flex; align-items: center; justify-content: center;">${component.name}</div>`;

                card.innerHTML = `
                    ${imageHtml}
                    <h3>${component.name} - ${component.price.toLocaleString()} VNƒê</h3>
                    <div class="component-info" style="display: none;">
                        ${component.socket ? `<p>Socket: ${component.socket}</p>` : ''}
                        ${component.memoryType ? `<p>Lo·∫°i RAM: ${component.memoryType}</p>` : ''}
                        ${component.cores ? `<p>Cores: ${component.cores}</p>` : ''}
                        ${component.threads ? `<p>Threads: ${component.threads}</p>` : ''}
                        ${component.technology ? `<p>Technology: ${component.technology}</p>` : ''}
                        ${component.ram_support ? `<p>RAM Support: ${component.ram_support}</p>` : ''}
                        ${component.ram_bus ? `<p>RAM Bus: ${component.ram_bus}</p>` : ''}
                        ${component.vram ? `<p>VRAM: ${component.vram}</p>` : ''}
                        ${component.vram_type ? `<p>VRAM Type: ${component.vram_type}</p>` : ''}
                        ${component.card_type ? `<p>Card Type: ${component.card_type}</p>` : ''}
                        ${component.type ? `<p>Type: ${component.type}</p>` : ''}
                        ${component.speed ? `<p>Speed: ${component.speed}</p>` : ''}
                        ${component.size ? `<p>Size: ${component.size}</p>` : ''}
                        ${component.nvmeSlots ? `<p>NVMe Slots: ${component.nvmeSlots}</p>` : ''}
                        ${component.pcieVersion ? `<p>PCIe Version: ${component.pcieVersion}</p>` : ''}
                        ${component.formFactor ? `<p>Form Factor: ${component.formFactor}</p>` : ''} <!-- ƒê√£ th√™m d√≤ng n√†y -->
                        ${component.panelType ? `<p>Panel Type: ${component.panelType}</p>` : ''}
                        ${component.refreshRate ? `<p>Refresh Rate: ${component.refreshRate}</p>` : ''}
                        ${component.screenSize ? `<p>Screen Size: ${component.screenSize}</p>` : ''}
        
                        ${component.sockets ? `<p>Sockets h·ªó tr·ª£: ${component.sockets.join(', ')}</p>` : ''}
                        ${component.sync ? `<p>ƒê·ªìng b·ªô LED: ${component.sync}</p>` : ''}
        
                        ${component.supportedMainboards ? `<p>Mainboard h·ªó tr·ª£: ${component.supportedMainboards.join(', ')}</p>` : ''}
                        ${component.dimensions ? `<p>K√≠ch th∆∞·ªõc Case: ${component.dimensions}</p>` : ''}
        
                        ${component.connectors ? `<div class="connectors">
                            <p>Connectors:</p>
                            <ul>
                                ${component.connectors.mainboard ? `<li>Mainboard: ${component.connectors.mainboard}</li>` : ''}
                                ${component.connectors.cpu ? `<li>CPU: ${Array.isArray(component.connectors.cpu) ? component.connectors.cpu.join(', ') : component.connectors.cpu}</li>` : ''}
                                ${component.connectors.pcie ? `<li>PCIe: ${Array.isArray(component.connectors.pcie) ? component.connectors.pcie.join(', ') : component.connectors.pcie}</li>` : ''}
                                ${component.connectors.sata ? `<li>SATA: ${component.connectors.sata}</li>` : ''}
                                ${component.connectors.molex ? `<li>Molex: ${component.connectors.molex}</li>` : ''}
                            </ul>
                        </div>` : ''}
        
                        ${component.power ? `<p>Power: ${component.power}</p>` : ''}
                    </div>
                `;

                // Th√™m s·ª± ki·ªán click ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt
                card.addEventListener("click", function () {
                    const info = card.querySelector(".component-info");
                    info.style.display = info.style.display === "none" ? "block" : "none";
                });

                selectedComponentsList.appendChild(card);
                selectedComponentsDetails.push(component);
            }
        }


        // C·∫≠p nh·∫≠t t·ªïng gi√° - FIX CH√çNH
        const priceElement = totalPriceDisplay.querySelector('p');
        if (priceElement) {
            priceElement.textContent = `${total.toLocaleString()} VNƒê`;
        } else {
            console.error('Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ hi·ªÉn th·ªã gi√°');
        }

        return { total, selectedComponentsDetails }; // Tr·∫£ v·ªÅ object ch·ª©a c·∫£ t·ªïng ti·ªÅn v√† danh s√°ch chi ti·∫øt
    }

    function calculateTotalPriceAndSummary() {
        if (!modalSummaryContent || !modalTotalPriceDisplay || !imagePreviewContainer) {
            console.error("Missing modal elements");
            return;
        }

        const calculationResult = updateSelectedComponents(); // Get the return value
        const total = calculationResult.total;         // Extract total
        const selectedComponentsDetails = calculationResult.selectedComponentsDetails; // Extract selectedComponentsDetails

        modalSummaryContent.innerHTML = ''; // X√≥a n·ªôi dung c≈© c·ªßa modal
        imagePreviewContainer.innerHTML = ''; // X√≥a ·∫£nh c≈© n·∫øu c√≥

        // ·∫®n ph·∫ßn hi·ªÉn th·ªã text t·ªïng ti·ªÅn trong modal (ch·ªâ hi·ªÉn th·ªã b·∫£ng)
        modalTotalPriceDisplay.style.display = 'none';

        // T·∫°o b·∫£ng HTML ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt
        const table = document.createElement('table');
        table.className = 'component-table'; // Th√™m class ƒë·ªÉ CSS (t√πy ch·ªçn)

        // T·∫°o h√†ng ti√™u ƒë·ªÅ b·∫£ng
        const headerRow = table.insertRow();
        const headers = ['Lo·∫°i', 'H√¨nh ·∫£nh', 'T√™n Linh Ki·ªán', 'Gi√° Ti·ªÅn', 'B·∫£o h√†nh', 'T√¨nh tr·∫°ng']; // Th√™m "Lo·∫°i"
        headers.forEach(headerText => {
            const headerCell = document.createElement('th');
            headerCell.textContent = headerText;
            headerRow.appendChild(headerCell);
        });

        // Th√™m d·ªØ li·ªáu linh ki·ªán v√†o b·∫£ng
        selectedComponentsDetails.forEach(component => {
            const dataRow = table.insertRow();

            // √î H√¨nh ·∫£nh


            // √î Lo·∫°i linh ki·ªán (type) - L·∫•y t·ª´ key c·ªßa componentSelects
            const typeCell = dataRow.insertCell();
            let componentType = '';
            for (const [type, select] of Object.entries(componentSelects)) {
                if (select.value === Object.keys(components[type]).find(key => components[type][key] === component)) {
                    componentType = type.toUpperCase(); // In hoa lo·∫°i linh ki·ªán
                    break;
                }
            }
            typeCell.textContent = componentType;

            const imageCell = dataRow.insertCell();
            if (component.image) {
                const img = document.createElement('img');
                img.src = component.image;
                img.alt = component.name;
                img.style.maxWidth = '70px'; // ƒêi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc ·∫£nh trong b·∫£ng
                imageCell.appendChild(img);
            }


            // √î T√™n linh ki·ªán
            const nameCell = dataRow.insertCell();
            nameCell.textContent = component.name;

            // √î Gi√°
            const priceCell = dataRow.insertCell();
            priceCell.textContent = `${component.price.toLocaleString()} VNƒê`;

            // √î B·∫£o h√†nh
            const warrantyCell = dataRow.insertCell();
            warrantyCell.textContent = component.warranty || 'Kh√¥ng c√≥';

            // √î T√¨nh tr·∫°ng
            const conditionCell = dataRow.insertCell();
            conditionCell.textContent = component.condition || 'Kh√¥ng r√µ';
        });

        modalSummaryContent.appendChild(table); // Th√™m b·∫£ng v√†o modal
        summaryModal.style.display = 'block'; // Hi·ªÉn th·ªã modal
        modalTotalPriceDisplay.style.display = 'block'; // ƒê·∫£m b·∫£o ph·∫ßn t·ª≠ hi·ªÉn th·ªã
        modalTotalPriceDisplay.textContent = `T·ªïng c·ªông: ${total.toLocaleString()} VNƒê`; // C·∫≠p nh·∫≠t gi√° ti·ªÅn
    }

    function updateScores() {
        console.log("H√†m updateScores() ƒë∆∞·ª£c g·ªçi!");

        const cpuDropdown = document.getElementById('cpu');
        const mainboardDropdown = document.getElementById('mainboard');
        const vgaDropdown = document.getElementById('vga');
        const ssdDropdown = document.getElementById('ssd');
        const psuDropdown = document.getElementById('psu');
        const caseDropdown = document.getElementById('case');
        const cpuCoolerDropdown = document.getElementById('cpuCooler');
        const ramDropdown = document.getElementById('ram');

        // Ki·ªÉm tra dropdown elements t·ªìn t·∫°i
        if (!cpuDropdown || !mainboardDropdown || !vgaDropdown || !ssdDropdown || !psuDropdown || !caseDropdown || !cpuCoolerDropdown || !ramDropdown) {
            console.error("‚ùå Kh√¥ng t√¨m th·∫•y m·ªôt ho·∫∑c nhi·ªÅu dropdown elements! Ki·ªÉm tra l·∫°i ID HTML.");
            return;
        }
        const socketMessageElement = document.getElementById("socket-message");
        const scoreMessageElement = document.getElementById("score-message");
        const upgradeMessageElement = document.getElementById("upgrade-message");

        const selectedCpuKey = cpuDropdown.value;
        if (!selectedCpuKey) {
            console.error("‚ùå Kh√¥ng c√≥ CPU n√†o ƒë∆∞·ª£c ch·ªçn!");
            return;
        }
        const selectedCpu = cpuData[selectedCpuKey];

        // Khai b√°o bi·∫øn selectedMainboardKey tr∆∞·ªõc khi s·ª≠ d·ª•ng
        const selectedMainboardKey = mainboardDropdown.value;

        // C·∫≠p nh·∫≠t danh s√°ch Mainboard theo Socket c·ªßa CPU
        const mainboardOptions = mainboardDropdown.options;
        let mainboardCompatible = false;
        for (let i = 0; i < mainboardOptions.length; i++) {
            const mainboardOption = mainboardOptions[i];
            const mainboardKey = mainboardOption.value;
            const mainboard = mainboardData[mainboardKey];

            if (mainboard && mainboard.sockets.includes(selectedCpu.socket)) {
                mainboardOption.style.display = "block";
                mainboardOption.disabled = false;
                mainboardCompatible = true;
            } else {
                mainboardOption.style.display = "none";
                mainboardOption.disabled = true;
            }
        }
        if (!mainboardCompatible) {
            mainboardDropdown.value = "";
        }

        // C·∫≠p nh·∫≠t danh s√°ch RAM theo RAM h·ªó tr·ª£ c·ªßa CPU v√† lo·∫°i RAM c·ªßa Mainboard
        const ramOptions = ramDropdown.options;
        let ramCompatible = false;
        const selectedMainboard = mainboardData[selectedMainboardKey];

        for (let i = 0; i < ramOptions.length; i++) {
            const ramOption = ramOptions[i];
            const ramKey = ramOption.value;
            const ram = ramData[ramKey];

            if (
                ram &&
                selectedCpu.ram_support.includes(ram.type) &&
                selectedMainboard && selectedMainboard.memoryType === ram.type
            ) {
                ramOption.style.display = "block";
                ramOption.disabled = false;
                ramCompatible = true;
            } else {
                ramOption.style.display = "none";
                ramOption.disabled = true;
            }
        }
        if (!ramCompatible) {
            ramDropdown.value = "";
        }

        const selectedVgaKey = vgaDropdown.value;
        const selectedSsdKey = ssdDropdown.value;
        const selectedPsuKey = psuDropdown.value;
        const selectedCaseKey = caseDropdown.value;
        const selectedCpuCoolerKey = cpuCoolerDropdown.value;
        const selectedRamKey = ramDropdown.value; // Get selected RAM key


        const cpuName = selectedCpuKey && cpuData[selectedCpuKey] ? cpuData[selectedCpuKey].name : "...";
        const cpuScore = selectedCpuKey && cpuData[selectedCpuKey] ? Number(cpuData[selectedCpuKey].score) : "...";

        const mainboardName = selectedMainboardKey && mainboardData[selectedMainboardKey] ? mainboardData[selectedMainboardKey].name : "...";
        const mainboardScore = selectedMainboardKey && mainboardData[selectedMainboardKey] ? Number(mainboardData[selectedMainboardKey].score) : "...";

        const vgaName = selectedVgaKey && vgaData[selectedVgaKey] ? vgaData[selectedVgaKey].name : "...";
        const vgaScore = selectedVgaKey && vgaData[selectedVgaKey] ? Number(vgaData[selectedVgaKey].score) : "...";

        const ssdName = selectedSsdKey && ssdData[selectedSsdKey] ? ssdData[selectedSsdKey].name : "...";
        const ssdScore = selectedSsdKey && ssdData[selectedSsdKey] ? Number(ssdData[selectedSsdKey].score) : "...";

        const psuName = selectedPsuKey && psuData[selectedPsuKey] ? psuData[selectedPsuKey].name : "...";
        const psuScore = selectedPsuKey && psuData[selectedPsuKey] ? Number(psuData[selectedPsuKey].score) : "...";

        const caseName = selectedCaseKey && caseData[selectedCaseKey] ? caseData[selectedCaseKey].name : "...";
        const caseScore = selectedCaseKey && caseData[selectedCaseKey] ? Number(caseData[selectedCaseKey].score) : "...";

        const cpuCoolerName = selectedCpuCoolerKey && cpuCoolerData[selectedCpuCoolerKey] ? cpuCoolerData[selectedCpuCoolerKey].name : "...";
        const cpuCoolerScore = selectedCpuCoolerKey && cpuCoolerData[selectedCpuCoolerKey] ? Number(cpuCoolerData[selectedCpuCoolerKey].score) : "...";

        const ramName = selectedRamKey && ramData[selectedRamKey] ? ramData[selectedRamKey].name : "..."; // Get RAM name
        const ramScore = selectedRamKey && ramData[selectedRamKey] ? Number(ramData[selectedRamKey].score) : "..."; // Get RAM score


        document.getElementById("cpu-name").textContent = cpuName;
        document.getElementById("cpu-score").textContent = cpuScore;

        document.getElementById("mainboard-name").textContent = mainboardName;
        document.getElementById("mainboard-score").textContent = mainboardScore;

        document.getElementById("vga-name").textContent = vgaName;
        document.getElementById("vga-score").textContent = vgaScore;

        document.getElementById("ssd-name").textContent = ssdName;
        document.getElementById("ssd-score").textContent = ssdScore;

        document.getElementById("ram-name").textContent = ramName; // Display RAM name
        document.getElementById("ram-score").textContent = ramScore; // Display RAM score

        document.getElementById("cpu-cooler-name").textContent = cpuCoolerName;
        document.getElementById("cpu-cooler-score").textContent = cpuCoolerScore;

        document.getElementById("psu-name").textContent = psuName;
        document.getElementById("psu-score").textContent = psuScore;

        document.getElementById("case-name").textContent = caseName;
        document.getElementById("case-score").textContent = caseScore;


        let totalScore = "...";
        let scoreSum = 0; // T·ªïng ƒëi·ªÉm

        if (!isNaN(Number(cpuScore))) { scoreSum += Number(cpuScore); }
        if (!isNaN(Number(mainboardScore))) { scoreSum += Number(mainboardScore); }
        if (!isNaN(Number(vgaScore))) { scoreSum += Number(vgaScore); }
        if (!isNaN(Number(ssdScore))) { scoreSum += Number(ssdScore); }
        if (!isNaN(Number(psuScore))) { scoreSum += Number(psuScore); }
        if (!isNaN(Number(caseScore))) { scoreSum += Number(caseScore); }
        if (!isNaN(Number(cpuCoolerScore))) { scoreSum += Number(cpuCoolerScore); }
        if (!isNaN(Number(ramScore))) { scoreSum += Number(ramScore); } // Add RAM score to total


        totalScore = (scoreSum / 8).toFixed(2); // T√≠nh t·ªïng ƒëi·ªÉm trung b√¨nh c·ªßa t·∫•t c·∫£ 8 linh ki·ªán v√† l√†m tr√≤n ƒë·∫øn 2 ch·ªØ s·ªë th·∫≠p ph√¢n // Changed divisor to 8


        document.getElementById("total-score").textContent = totalScore;
        console.log("totalScore:", totalScore); // Console log 1 l·∫ßn th√¥i
        const cpuScoreValue = Number(cpuScore);
        const mainboardScoreValue = Number(mainboardScore);


        let recommendationMessage = ""; // Bi·∫øn l∆∞u th√¥ng b√°o khuy·∫øn ngh·ªã d·ª±a tr√™n ƒëi·ªÉm t·ªïng (CHO KHU V·ª∞C #score-message)
        let upgradeRecommendationMessage = ""; // Bi·∫øn l∆∞u th√¥ng b√°o KHUY·∫æN NGH·ªä N√ÇNG C·∫§P (CHO KHU V·ª∞C #upgrade-message)


        if (totalScore <= 2.5) {
            recommendationMessage = "M√ÅY H∆†I Y·∫æU, CH∆†I GAME ONLINE N√äN N√ÇNG CPU V√Ä MAIN";
        } else if (totalScore <= 4) {
            recommendationMessage = "M√ÅY C≈®NG KH√Å ·ªîN R·ªíI MU·ªêN TƒÇNG FPS M√Ä CH∆†I SETTING TH·∫§P H√ÉY TƒÇNG CPU";
        } else if (totalScore <= 6) {
            recommendationMessage = "M√ÅY T·∫†M ·ªîN R·ªíI, TƒÇNG FPS SETTING TH·∫§P N√ÇNG CPU C√íN TƒÇNG FPS 3A TH√å N√ÇNG VGA";
        } else if (totalScore <= 8) {
            recommendationMessage = "M√ÅY NH∆Ø N√ÄY C√íN G√å M√Ä CH√ä N·ªÆA";
        } else if (totalScore <= 10) {
            recommendationMessage = "B·∫†N MU·ªêN MUA C·∫¢ S·ªêP KH√îNG?";
        }


        // TH√äM ƒêO·∫†N CODE M·ªöI ƒê·ªÇ KHUY·∫æN NGH·ªä N√ÇNG C·∫§P CPU/MAINBOARD (CHO KHU V·ª∞C #upgrade-message)
        if (!isNaN(cpuScoreValue) && !isNaN(mainboardScoreValue)) { // ƒê·∫£m b·∫£o c·∫£ hai gi√° tr·ªã ƒë·ªÅu l√† s·ªë
            const scoreDiff = cpuScoreValue - mainboardScoreValue; // T√≠nh ƒë·ªô ch√™nh l·ªách ƒëi·ªÉm (CPU - Mainboard)

            if (scoreDiff >= 3) { // CPU m·∫°nh h∆°n Mainboard t·ª´ 2 ƒëi·ªÉm tr·ªü l√™n
                upgradeRecommendationMessage = "N√™n n√¢ng c·∫•p Mainboard";
            } else if (scoreDiff <= -3) { // Mainboard m·∫°nh h∆°n CPU t·ª´ 2 ƒëi·ªÉm tr·ªü l√™n (scoreDiff <= -2 t∆∞∆°ng ƒë∆∞∆°ng MainboardScore - CPUScore >= 2)
                upgradeRecommendationMessage = "N√™n n√¢ng c·∫•p CPU";
            }
        }


        // HI·ªÇN TH·ªä TH√îNG B√ÅO ·ªû C√ÅC KHU V·ª∞C RI√äNG BI·ªÜT
        if (scoreMessageElement && recommendationMessage) { // Hi·ªÉn th·ªã th√¥ng b√°o ƒêI·ªÇM T·ªîNG ·ªü khu v·ª±c #score-message
            scoreMessageElement.textContent = recommendationMessage;
            scoreMessageElement.classList.add('score-message'); // Th√™m class score-message cho #score-message
        }

        if (upgradeMessageElement && upgradeRecommendationMessage) { // Hi·ªÉn th·ªã th√¥ng b√°o N√ÇNG C·∫§P ·ªü khu v·ª±c #upgrade-message
            upgradeMessageElement.textContent = upgradeRecommendationMessage;
            upgradeMessageElement.classList.add('upgrade-message'); // Th√™m class upgrade-message cho #upgrade-message
        }
    }
    // G·ªçi h√†m updateScores() l·∫ßn ƒë·∫ßu ƒë·ªÉ hi·ªÉn th·ªã gi√° tr·ªã m·∫∑c ƒë·ªãnh ho·∫∑c khi trang t·∫£i xong
    setTimeout(updateScores, 0);

    // H√†m t·ª± ƒë·ªông ch·ªçn c·∫•u h√¨nh d·ª±a tr√™n game, ng√¢n s√°ch v√† lo·∫°i CPU
    function autoSelectConfig(gameId, budget, cpuType) {
        console.log(`Attempting autoSelectConfig with: gameId=${gameId}, budget=${budget}, cpuType=${cpuType}`);
        
        if (!gameId || !budget || !cpuType) {
            console.warn('Missing required parameters for autoSelectConfig');
            return null;
        }

        // ƒê·∫£m b·∫£o c·∫•u h√¨nh m·∫∑c ƒë·ªãnh ƒë√£ ƒë∆∞·ª£c t·∫£i
        try {
            if (typeof window.intelConfigs === 'undefined') {
                // T·∫°o c·∫•u h√¨nh m·∫∑c ƒë·ªãnh cho Intel
                window.intelConfigs = {
                    'valorant': {
                        '8M': { cpu: '10400f', mainboard: 'H510', vga: '1660s', ram: 'furry-16', ssd: 'sstc-256', case: 'GA', cpuCooler: 'STOCK', psu: 'DT660' },
                        '16M': { cpu: '12400f', mainboard: 'ASUS-B760', vga: '3070', ram: 'cosair-16', ssd: 'crucial-500', case: 'GA3', cpuCooler: 'CR1000', psu: 'VSP750' }
                    },
                    'csgo': {
                        '8M': { cpu: '10400f', mainboard: 'H510', vga: '1660s', ram: 'furry-16', ssd: 'sstc-256', case: 'GA', cpuCooler: 'STOCK', psu: 'DT660' },
                        '16M': { cpu: '12400f', mainboard: 'ASUS-B760', vga: '3070', ram: 'cosair-16', ssd: 'crucial-500', case: 'GA3', cpuCooler: 'CR1000', psu: 'VSP750' }
                    },
                    'pubg': {
                        '8M': { cpu: '10400f', mainboard: 'H510', vga: '3060', ram: 'furry-16', ssd: 'sstc-256', case: 'GA', cpuCooler: 'STOCK', psu: 'DT660' },
                        '16M': { cpu: '12600kf', mainboard: 'ASUS-B760', vga: '3070', ram: 'cosair-16', ssd: 'crucial-500', case: 'GA3', cpuCooler: 'CR1000', psu: 'VSP750' }
                    },
                    'lol': {
                        '8M': { cpu: '10400f', mainboard: 'H510', vga: '1660s', ram: 'furry-16', ssd: 'sstc-256', case: 'GA', cpuCooler: 'STOCK', psu: 'DT660' },
                        '16M': { cpu: '12400f', mainboard: 'ASUS-B760', vga: '3070', ram: 'cosair-16', ssd: 'crucial-500', case: 'GA3', cpuCooler: 'CR1000', psu: 'VSP750' }
                    }
                };
                
                // Th√™m c√°c tr√≤ ch∆°i c√≤n l·∫°i c√πng c·∫•u h√¨nh c∆° b·∫£n
                const otherGames = ['gta-v', 'elden-ring', 'naraka', 'genshin', 'fo4', 'black-myth-wukong', 'god-of-war', 'battle-teams-2', 'delta-force', 'audition', 'mu-origin', 'crossfire'];
                otherGames.forEach(game => {
                    window.intelConfigs[game] = {
                        '8M': { cpu: '10400f', mainboard: 'H510', vga: '1660s', ram: 'furry-16', ssd: 'sstc-256', case: 'GA', cpuCooler: 'STOCK', psu: 'DT660' },
                        '16M': { cpu: '12400f', mainboard: 'ASUS-B760', vga: '3070', ram: 'cosair-16', ssd: 'crucial-500', case: 'GA3', cpuCooler: 'CR1000', psu: 'VSP750' }
                    };
                });
                
                console.log('Created default Intel configurations');
            }
            
            if (typeof window.amdConfigs === 'undefined') {
                // T·∫°o c·∫•u h√¨nh m·∫∑c ƒë·ªãnh cho AMD
                window.amdConfigs = {
                    'valorant': {
                        '8M': { cpu: '5600x', mainboard: 'GIGA-B450', vga: '1660s', ram: 'furry-16', ssd: 'sstc-256', case: 'GA', cpuCooler: 'STOCK', psu: 'DT660' },
                        '16M': { cpu: '5700x3d', mainboard: 'JGINYUE-B450', vga: '3070', ram: 'cosair-16', ssd: 'crucial-500', case: 'GA3', cpuCooler: 'CR1000', psu: 'VSP750' }
                    },
                    'csgo': {
                        '8M': { cpu: '5600x', mainboard: 'GIGA-B450', vga: '1660s', ram: 'furry-16', ssd: 'sstc-256', case: 'GA', cpuCooler: 'STOCK', psu: 'DT660' },
                        '16M': { cpu: '5700x3d', mainboard: 'JGINYUE-B450', vga: '3070', ram: 'cosair-16', ssd: 'crucial-500', case: 'GA3', cpuCooler: 'CR1000', psu: 'VSP750' }
                    },
                    'pubg': {
                        '8M': { cpu: '5600x', mainboard: 'GIGA-B450', vga: '3060', ram: 'furry-16', ssd: 'sstc-256', case: 'GA', cpuCooler: 'STOCK', psu: 'DT660' },
                        '16M': { cpu: '5700x3d', mainboard: 'JGINYUE-B450', vga: '3070', ram: 'cosair-16', ssd: 'crucial-500', case: 'GA3', cpuCooler: 'CR1000', psu: 'VSP750' }
                    },
                    'lol': {
                        '8M': { cpu: '5600x', mainboard: 'GIGA-B450', vga: '1660s', ram: 'furry-16', ssd: 'sstc-256', case: 'GA', cpuCooler: 'STOCK', psu: 'DT660' },
                        '16M': { cpu: '5700x3d', mainboard: 'JGINYUE-B450', vga: '3070', ram: 'cosair-16', ssd: 'crucial-500', case: 'GA3', cpuCooler: 'CR1000', psu: 'VSP750' }
                    }
                };
                
                // Th√™m c√°c tr√≤ ch∆°i c√≤n l·∫°i c√πng c·∫•u h√¨nh c∆° b·∫£n
                const otherGames = ['gta-v', 'elden-ring', 'naraka', 'genshin', 'fo4', 'black-myth-wukong', 'god-of-war', 'battle-teams-2', 'delta-force', 'audition', 'mu-origin', 'crossfire'];
                otherGames.forEach(game => {
                    window.amdConfigs[game] = {
                        '8M': { cpu: '5600x', mainboard: 'GIGA-B450', vga: '1660s', ram: 'furry-16', ssd: 'sstc-256', case: 'GA', cpuCooler: 'STOCK', psu: 'DT660' },
                        '16M': { cpu: '5700x3d', mainboard: 'JGINYUE-B450', vga: '3070', ram: 'cosair-16', ssd: 'crucial-500', case: 'GA3', cpuCooler: 'CR1000', psu: 'VSP750' }
                    };
                });
                
                console.log('Created default AMD configurations');
            }
        } catch (error) {
            console.error('Error initializing configurations:', error);
        }
        
        // L·∫•y c·∫•u h√¨nh ph√π h·ª£p
        const configs = cpuType.toLowerCase() === 'intel' ? window.intelConfigs : window.amdConfigs;
        
        if (!configs || !configs[gameId]) {
            console.warn(`No configuration found for ${cpuType} ${gameId}`);
            console.log('Available configs:', configs ? Object.keys(configs) : 'None');
            return null;
        }
        
        // ƒê·ªãnh d·∫°ng budget key
        const budgetInMillions = Math.floor(budget / 1000000);
        console.log(`Budget value in millions: ${budgetInMillions}M`);
        
        // L·∫•y c√°c m·ª©c ng√¢n s√°ch c√≥ s·∫µn v√† t√¨m m·ª©c g·∫ßn nh·∫•t
        const availableBudgets = Object.keys(configs[gameId])
            .map(budgetKey => parseInt(budgetKey.replace('M', '')));
        
        console.log(`Available budgets for ${gameId}:`, availableBudgets);
        
        // T√¨m m·ª©c ng√¢n s√°ch g·∫ßn nh·∫•t
        let closestBudget = availableBudgets.reduce((prev, curr) => 
            Math.abs(curr - budgetInMillions) < Math.abs(prev - budgetInMillions) ? curr : prev
        );
        
        const closestBudgetKey = `${closestBudget}M`;
        console.log(`Using closest available budget: ${closestBudgetKey} for requested budget: ${budgetInMillions}M`);
        
        const config = configs[gameId][closestBudgetKey];
        console.log('‚öôÔ∏è Config found:', config);
        
        // C·∫≠p nh·∫≠t c√°c dropdown theo c·∫•u h√¨nh
        if (config.cpu) updateDropdown('cpu', config.cpu);
        if (config.mainboard) updateDropdown('mainboard', config.mainboard);
        if (config.vga) updateDropdown('vga', config.vga);
        if (config.ram) updateDropdown('ram', config.ram);
        if (config.ssd) updateDropdown('ssd', config.ssd);
        if (config.case) updateDropdown('case', config.case);
        if (config.cpuCooler) updateDropdown('cpuCooler', config.cpuCooler);
        if (config.psu) updateDropdown('psu', config.psu);
        
        // C·∫≠p nh·∫≠t gi√° v√† t·ªïng ti·ªÅn sau khi t·∫•t c·∫£ c√°c dropdown ƒë∆∞·ª£c c·∫≠p nh·∫≠t
        setTimeout(function() {
            try {
                updateComponentPrices();
                console.log('Price table updated after auto-selection');
            } catch (error) {
                console.error('Error updating prices after auto-selection:', error);
            }
        }, 500);
        
        // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn v√† t√≥m t·∫Øt
        calculateTotalPriceAndSummary();
        
        return config;
    }

    // Export functions for use in other modules
    if (typeof window !== 'undefined') {
        window.getCPUGeneration = getCPUGeneration;
        window.getGameType = getGameType;
        window.autoSelectConfig = autoSelectConfig;
        window.updateComponentPrices = updateComponentPrices;  // Xu·∫•t h√†m updateComponentPrices
    }

    // Global score tracking
    let currentCPUScore = 0;
    let currentGPUScore = 0;

    // H√†m l·∫•y t√™n game t·ª´ ID
    function getGameName(gameId) {
        const gameNames = {
            'valorant': 'Valorant',
            'csgo': 'CS:GO',
            'pubg': 'PUBG',
            'lol': 'Li√™n Minh Huy·ªÅn Tho·∫°i',
            'gta-v': 'GTA V',
            'elden-ring': 'Elden Ring',
            'naraka': 'Naraka: Bladepoint',
            'genshin': 'Genshin Impact',
            'fo4': 'FIFA Online 4',
            'black-myth-wukong': 'Black Myth: Wukong',
            'god-of-war': 'God of War',
            'battle-teams-2': 'Battle Teams 2',
            'delta-force': 'Delta Force',
            'audition': 'Audition',
            'mu-origin': 'MU Origin',
            'crossfire': 'CrossFire'
        };
        return gameNames[gameId] || gameId;
    }

    // H√†m l·∫•y m√†u cho ƒë·ªô ·ªïn ƒë·ªãnh
    function getStabilityColor(stability) {
        if (stability >= 90) return "#28a745"; // R·∫•t ·ªïn ƒë·ªãnh - Green
        if (stability >= 70) return "#5cb85c";  // ·ªîn ƒë·ªãnh - Light Green
        if (stability >= 50) return "#f0ad4e";  // T∆∞∆°ng ƒë·ªëi ·ªïn ƒë·ªãnh - Yellow
        return "#dc3545";                      // Kh√¥ng ·ªïn ƒë·ªãnh - Red
    }

    // H√†m c·∫≠p nh·∫≠t th√¥ng tin gi√° v√† th√†nh ti·ªÅn trong b·∫£ng linh ki·ªán
    function updateComponentPrices() {
        // ƒê·∫£m b·∫£o bi·∫øn allComponents t·ªìn t·∫°i
        if (typeof allComponents === 'undefined') {
            window.allComponents = {
                cpu: [],
                mainboard: [],
                ram: [],
                vga: [],
                ssd: [],
                cpuCooler: [],
                psu: [],
                case: [],
                hdd: [],
                monitor: []
            };
        }

        // L·∫•y d·ªØ li·ªáu t·ª´ c√°c linh ki·ªán ƒë√£ ch·ªçn
        const componentsData = {
            cpu: { element: document.getElementById('cpu'), priceEl: document.getElementById('cpu-price'), totalEl: document.getElementById('cpu-total'), nameEl: document.getElementById('cpu-name') },
            mainboard: { element: document.getElementById('mainboard'), priceEl: document.getElementById('mainboard-price'), totalEl: document.getElementById('mainboard-total'), nameEl: document.getElementById('mainboard-name') },
            ram: { element: document.getElementById('ram'), priceEl: document.getElementById('ram-price'), totalEl: document.getElementById('ram-total'), nameEl: document.getElementById('ram-name') },
            vga: { element: document.getElementById('vga'), priceEl: document.getElementById('vga-price'), totalEl: document.getElementById('vga-total'), nameEl: document.getElementById('vga-name') },
            ssd: { element: document.getElementById('ssd'), priceEl: document.getElementById('ssd-price'), totalEl: document.getElementById('ssd-total'), nameEl: document.getElementById('ssd-name') },
            cpuCooler: { element: document.getElementById('cpuCooler'), priceEl: document.getElementById('cpu-cooler-price'), totalEl: document.getElementById('cpu-cooler-total'), nameEl: document.getElementById('cpu-cooler-name') },
            psu: { element: document.getElementById('psu'), priceEl: document.getElementById('psu-price'), totalEl: document.getElementById('psu-total'), nameEl: document.getElementById('psu-name') },
            case: { element: document.getElementById('case'), priceEl: document.getElementById('case-price'), totalEl: document.getElementById('case-total'), nameEl: document.getElementById('case-name') },
            additional: { priceEl: document.getElementById('additional-component-price'), totalEl: document.getElementById('additional-component-total'), nameEl: document.getElementById('additional-component-name') },
            monitor: { element: document.getElementById('monitor'), priceEl: document.getElementById('monitor-price'), totalEl: document.getElementById('monitor-total'), nameEl: document.getElementById('monitor-name') }
        };

        // Linh ki·ªán b·ªï sung c√≥ th·ªÉ l√† HDD ho·∫∑c monitor
        const hdd = document.getElementById('hdd');

        // C√†i ƒë·∫∑t th√¥ng tin linh ki·ªán th·ª© 9 (b·ªï sung HDD)
        let additionalComponent = null;
        if (hdd && hdd.value) {
            const hddOption = hdd.options[hdd.selectedIndex];
            if (hddOption) {
                try {
                    const component = getComponentFromOptions(window.allComponents, 'hdd', hdd.value);
                    if (component) {
                        additionalComponent = component;
                    } else {
                        // N·∫øu kh√¥ng t√¨m th·∫•y trong allComponents, l·∫•y t·ª´ t√™n option
                        additionalComponent = { name: hddOption.text || 'HDD', price: parseInt(hddOption.dataset.price || '0', 10) };
                    }
                } catch (error) {
                    console.error('Error getting HDD component:', error);
                }
            }
        }

        if (additionalComponent && componentsData.additional.nameEl) {
            componentsData.additional.nameEl.textContent = additionalComponent.name;
            componentsData.additional.priceEl.textContent = formatPrice(additionalComponent.price);
            componentsData.additional.totalEl.textContent = formatPrice(additionalComponent.price);
        } else {
            // N·∫øu kh√¥ng c√≥ linh ki·ªán b·ªï sung n√†o ƒë∆∞·ª£c ch·ªçn
            if (componentsData.additional.nameEl) componentsData.additional.nameEl.textContent = "";
            if (componentsData.additional.priceEl) componentsData.additional.priceEl.textContent = "";
            if (componentsData.additional.totalEl) componentsData.additional.totalEl.textContent = "";
        }

        // C·∫≠p nh·∫≠t gi√° v√† th√†nh ti·ªÅn cho c√°c linh ki·ªán ch√≠nh
        let totalPrice = 0;
        
        Object.keys(componentsData).forEach(type => {
            if (type === 'additional') return; // ƒê√£ x·ª≠ l√Ω ·ªü tr√™n
            
            const data = componentsData[type];
            if (data.element && data.element.value) {
                const option = data.element.options[data.element.selectedIndex];
                if (option) {
                    try {
                        let component = null;
                        try {
                            component = getComponentFromOptions(window.allComponents, type, data.element.value);
                        } catch (error) {
                            console.log(`Could not get component from allComponents: ${error.message}`);
                        }

                        if (!component) {
                            // N·∫øu kh√¥ng t√¨m th·∫•y trong allComponents, s·ª≠ d·ª•ng th√¥ng tin t·ª´ option
                            let price = 0;
                            if (option.dataset && option.dataset.price) {
                                price = parseInt(option.dataset.price, 10);
                            } else {
                                // Tr√≠ch xu·∫•t gi√° t·ª´ text n·∫øu c√≥ ƒë·ªãnh d·∫°ng nh∆∞ "T√™n - XXX,XXX VNƒê"
                                const text = option.text || '';
                                const priceMatch = text.match(/(\d[\d\s,\.]*)\s*VNƒê/);
                                if (priceMatch && priceMatch[1]) {
                                    price = parseInt(priceMatch[1].replace(/[\s,\.]/g, ''), 10);
                                }
                            }
                            component = { 
                                name: option.text || type, 
                                price: price
                            };
                        }

                        if (component) {
                            const price = component.price || 0;
                            
                            // Tr√≠ch xu·∫•t t√™n s·∫£n ph·∫©m t·ª´ text (lo·∫°i b·ªè ph·∫ßn gi√° n·∫øu c√≥)
                            let name = component.name || '';
                            if (name.includes(' - ')) {
                                name = name.split(' - ')[0];
                            }
                            
                            if (data.nameEl) data.nameEl.textContent = name;
                            if (data.priceEl) data.priceEl.textContent = formatPrice(price);
                            if (data.totalEl) data.totalEl.textContent = formatPrice(price);
                            
                            totalPrice += price;
                        }
                    } catch (error) {
                        console.error(`Error updating price for ${type}:`, error);
                    }
                }
            } else {
                // N·∫øu kh√¥ng c√≥ linh ki·ªán n√†o ƒë∆∞·ª£c ch·ªçn, x√≥a th√¥ng tin
                if (data.nameEl) data.nameEl.textContent = "";
                if (data.priceEl) data.priceEl.textContent = "";
                if (data.totalEl) data.totalEl.textContent = "";
            }
        });

        // Th√™m gi√° c·ªßa linh ki·ªán b·ªï sung v√†o t·ªïng ti·ªÅn
        if (additionalComponent) {
            totalPrice += additionalComponent.price || 0;
        }

        // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn v√† c√≤n l·∫°i
        const totalPriceCell = document.getElementById('total-price-cell');
        const remainingPriceCell = document.getElementById('remaining-price-cell');
        
        if (totalPriceCell) totalPriceCell.textContent = formatPrice(totalPrice);
        if (remainingPriceCell) remainingPriceCell.textContent = formatPrice(totalPrice);

        // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn tr√™n trang
        const totalPriceDisplay = document.querySelector('#total-price p');
        if (totalPriceDisplay) {
            totalPriceDisplay.textContent = formatPrice(totalPrice) + ' VNƒê';
        }
    }

    // H√†m l·∫•y th√¥ng tin component t·ª´ danh s√°ch t√πy ch·ªçn
    function getComponentFromOptions(componentsData, type, value) {
        // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p componentsData kh√¥ng t·ªìn t·∫°i
        if (!componentsData) return null;
        
        // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p kh√¥ng c√≥ lo·∫°i component n√†y
        if (!componentsData[type]) return null;
        
        // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p m·∫£ng r·ªóng
        if (!Array.isArray(componentsData[type])) return null;
        
        try {
            // T√¨m component theo id
            return componentsData[type].find(comp => comp.id === value) || null;
        } catch (error) {
            console.error(`Error finding component (${type}, ${value}):`, error);
            return null;
        }
    }

    // ƒê·ªãnh d·∫°ng gi√° ti·ªÅn
    function formatPrice(price) {
        return price ? price.toLocaleString() : "0";
    }

    // G·ªçi h√†m c·∫≠p nh·∫≠t gi√° khi c√≥ thay ƒë·ªïi trong c√°c dropdown
    function setupPriceUpdateListeners() {
        const componentIds = ['cpu', 'mainboard', 'ram', 'vga', 'ssd', 'cpuCooler', 'psu', 'case', 'hdd', 'monitor'];
        
        componentIds.forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                // X·ª≠ l√Ω s·ª± ki·ªán khi gi√° tr·ªã thay ƒë·ªïi
                element.addEventListener('change', function() {
                    console.log(`Component ${id} changed to ${this.value}`);
                    // C·∫≠p nh·∫≠t b·∫£ng gi√° th·ªùi gian th·ª±c
                    updateComponentPrices();
                });
            }
        });
        
        console.log('Price update listeners set up successfully');
    }

    // Kh·ªüi t·∫°o khi trang ƒë√£ t·∫£i xong
    document.addEventListener('DOMContentLoaded', function() {
        // Thi·∫øt l·∫≠p c√°c s·ª± ki·ªán l·∫Øng nghe cho vi·ªác c·∫≠p nh·∫≠t gi√°
        setupPriceUpdateListeners();
        
        // ƒê·∫£m b·∫£o r·∫±ng b·∫£ng linh ki·ªán tr·ªëng khi m·ªõi t·∫£i trang
        const priceCells = document.querySelectorAll('[id$="-price"], [id$="-total"], [id$="-name"]');
        priceCells.forEach(cell => {
            if (cell) cell.textContent = '';
        });
        
        console.log('Component table initialized with empty values');
        
        // C·∫≠p nh·∫≠t gi√° n·∫øu ƒë√£ c√≥ component ƒë∆∞·ª£c ch·ªçn (cho tr∆∞·ªùng h·ª£p refresh trang)
        setTimeout(updateComponentPrices, 1000);
    });

    // H√†m c·∫≠p nh·∫≠t gi√° tr·ªã dropdown
    function updateDropdown(id, value) {
        const dropdown = document.getElementById(id);
        if (!dropdown) {
            console.error(`Dropdown with id ${id} not found`);
            return false;
        }

        // N·∫øu value kh√¥ng ƒë∆∞·ª£c cung c·∫•p, kh√¥ng l√†m g√¨ c·∫£
        if (!value) {
            console.warn(`No value provided for dropdown ${id}`);
            return false;
        }

        console.log(`Attempting to set ${id} dropdown to value: ${value}`);

        // T√¨m option ph√π h·ª£p
        let foundOption = false;
        let optionToSelect = null;

        // Ph∆∞∆°ng ph√°p 1: T√¨m ch√≠nh x√°c theo value
        for (let i = 0; i < dropdown.options.length; i++) {
            const option = dropdown.options[i];
            if (option.value.toLowerCase() === value.toLowerCase()) {
                optionToSelect = option;
                foundOption = true;
                console.log(`Found exact match for ${id}: ${option.text}`);
                break;
            }
        }

        // Ph∆∞∆°ng ph√°p 2: T√¨m option c√≥ ch·ª©a value
        if (!foundOption) {
            for (let i = 0; i < dropdown.options.length; i++) {
                const option = dropdown.options[i];
                // Ki·ªÉm tra n·∫øu value n·∫±m trong option.value ho·∫∑c option.text
                if (option.value.toLowerCase().includes(value.toLowerCase()) || 
                    option.text.toLowerCase().includes(value.toLowerCase())) {
                    optionToSelect = option;
                    foundOption = true;
                    console.log(`Found partial match for ${id}: ${option.text}`);
                    break;
                }
            }
        }

        // Ph∆∞∆°ng ph√°p 3: D√πng option ƒë·∫ßu ti√™n kh√¥ng ph·∫£i l√† disabled & placeholder
        if (!foundOption) {
            for (let i = 0; i < dropdown.options.length; i++) {
                const option = dropdown.options[i];
                if (!option.disabled && option.value) {
                    optionToSelect = option;
                    foundOption = true;
                    console.log(`Using first available option for ${id}: ${option.text}`);
                    break;
                }
            }
        }

        // C·∫≠p nh·∫≠t gi√° tr·ªã dropdown n·∫øu t√¨m th·∫•y option
        if (foundOption && optionToSelect) {
            dropdown.value = optionToSelect.value;
            // K√≠ch ho·∫°t s·ª± ki·ªán change ƒë·ªÉ c·∫≠p nh·∫≠t giao di·ªán
            const event = new Event('change', { bubbles: true });
            dropdown.dispatchEvent(event);
            return true;
        } else {
            console.warn(`Could not find suitable option for ${id} with value ${value}`);
            return false;
        }
    }
}
